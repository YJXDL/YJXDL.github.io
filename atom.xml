<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YJXDL的博客</title>
  
  <subtitle>生若直木,不语斧凿</subtitle>
  <link href="https://yjxdl.github.io/atom.xml" rel="self"/>
  
  <link href="https://yjxdl.github.io/"/>
  <updated>2022-10-11T09:40:44.118Z</updated>
  <id>https://yjxdl.github.io/</id>
  
  <author>
    <name>闫晶鑫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>远程SQL Server数据传递给MYSQL</title>
    <link href="https://yjxdl.github.io/2022/10/11/CAPP/MYSQL%E4%BC%A0%E8%BE%93%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE/"/>
    <id>https://yjxdl.github.io/2022/10/11/CAPP/MYSQL%E4%BC%A0%E8%BE%93%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE/</id>
    <published>2022-10-11T06:47:13.000Z</published>
    <updated>2022-10-11T09:40:44.118Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    <category term="Mysql" scheme="https://yjxdl.github.io/categories/Mysql/"/>
    
    
    <category term="Mysql" scheme="https://yjxdl.github.io/tags/Mysql/"/>
    
    <category term="SQLServer" scheme="https://yjxdl.github.io/tags/SQLServer/"/>
    
  </entry>
  
  <entry>
    <title>Mysql远程连接设置</title>
    <link href="https://yjxdl.github.io/2022/10/10/CAPP/MYSQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%AE%BE%E7%BD%AE/"/>
    <id>https://yjxdl.github.io/2022/10/10/CAPP/MYSQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-10-10T11:25:57.000Z</published>
    <updated>2022-10-11T09:25:47.634Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Mysql远程连接配置说明</summary>
    
    
    
    <category term="Mysql" scheme="https://yjxdl.github.io/categories/Mysql/"/>
    
    
    <category term="Mysql" scheme="https://yjxdl.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>PLC学习</title>
    <link href="https://yjxdl.github.io/2022/10/03/CAPP/PLC%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yjxdl.github.io/2022/10/03/CAPP/PLC%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-10-03T02:19:25.000Z</published>
    <updated>2022-10-06T03:15:23.322Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX18q+ZoUuqaXRfsZ5XASecc6M2mXee1kIvB5Gg5Qw8MLHUy0xTBUTpNMHOYovHHbaF0cwuV65AfNBCCksQQiVgxuZGalgYujVXG5UBI3Zsv5tMaj5XMptTFVlhpicK+FjebZ7vCV6qfpd3NQ6uyMFVvGrXuqoLZulJYAAgV6nc/bZeTAWV3DYDdPCxEhP/z1HlWAaOcjivRrrn9HurGEEv4k5TFNIF96D7RnpH+XV1K4BfeSXUR20JgoKQjK2VhanaVHC6bFRTWucpsErED8Lrh0Lz1bueqkoSnV6la1NTIFz7Rn2tHstlfMiIV/23uuvqgiEH2+oYpQdXexOVfX31lRiwEL0NIGg7zb2xdPdWGXD2kTG8BZaGJJ2/Zm7b6Bppf+GJD5nbAdo9bMh2OjOZL5GVaBIGyZ6KUuGhx20Eg2UOZQbFfm9nt9TGNcoYhrzOm/moxzV6nB4GI/BCdVzLiNjrHeOpqvgtBCPte1UAVf6hfvCvgS0w8cwpk6Vtt8VaJfzVU+gyCvV09RrYWi6XzCcBDLX7b3ESNQZl2L6l755L0RVy0Er3NVJlFi3tKVGC1CUlJ6U9OLSA4UjXMtcRiqwN4xp4m8l2/Lr2qNuuELLWXUIx9O5hnLvqDC9EZE6Vs0BbegGidTg0Xx0tuC20+HufFH8tuDUfpJx2Ti0T+QWtJArF9v9C3GcSQzjsrLdlU+UEeBgcmdndZhKqSSKiw675oiswkB24v9xhe97MMzHRH3jyHsymLvaQgajqEAVgZq2TYiXKA92HcvUVa2j4d4598MucYZ4yooH3kSCT93Ut5RWHp71AoYD/iJkexLBN8uIiXMGnPemex5l6bu3EOlitVfq6kFT5r5r9BMRZRfckaeWKPbnTYKGjyx4PxJtSrHFLolOaNbANkEncnzaAynXdAPiM9RYjQAHQx5Y7cgUKQqloOxx+vMRNln/fCOyZiD+RSARdt9nRCp+X1vsracFuX9zgPbGXgRKv2NNOZS8KVKs5rh58MX+PRwngkzaJDDfRsgq8l45++Uz1UTRtSiTXlTZ0wVEBsqvGvQUCH4o2KGqSs2SNYBmzfxA8rHLTMSFy3mxWn3sKKEYct4clLSk7rSYMSX2ygxNLiM5UPwkfg9dpA8rGBj62V4rnv4c4vUF9MRVwoPGZAqeL2H9V1bEUhyRNwZy2dsPQAJnP8ksN483Cs18Z2kq5cfuNun/zUtAnpPv9u6MCIyx/pncOslRg/4qcvrxyfE87+2xoWbQrYl+DdJMcL0E7JcZju84dX89xaUEiMJprDhmDvHEF7qIr1tuyGNW53Q4EyWPlK0iJaAMY0AHowDXMAHuFjWgllmVQ1BfyPVW4AbV4a7yFkRcpPkzA+OH6JVQ9bOxkQr8OAO5jsjscjWMhJ3E3GFAXNTVIDxE39+ydFkocxpSN3FM9Z/YB/IfDStl7kYlKWReJj0Mc7qC0OC54l7lkcObjcz8b5DJz5Jg9SeY01uBu/EvWEwjI6KOgm2aJm2cUstifuN7gV06212Bl1tfKNVdCkGS3rleLMEsJKRXH7vVe7tNUQWB6kq0UinOBsym4VLfzwfc8w8wYMaymSq/4FdrQDr/8DYZUxPSfFOoYPEf+gVUGwpbsRxB49TYlpULsVtfRIP62Z5QDJHPSlHHOpymJLyZIXc2n8rXs+dJMIA0CxX2ps0vxOWsogO4Oz8BNozWHg7/5zB29ET0CH9DkTFh46SnOwajDrA6ognxbJJ1L8IxfkGMUfEKuMMvNNd9Ntq8YGoB2DeGXUQkN61AqBCFvHKTK2TBAnNRgUs0tej3LbsLax2mXE6uRHliv2fPodFpXtWr6Yxpc+6OYZlXUGNJijklLaNbm3zEwottCyPNCPIMIqHPnIEyrK4YhxNgPoM3Ht0x4NjNtk1kDivhO8s8AIokGQ9c0IVGjtEVGLEFPtJ0XI2FVsSzDBhaHrsMI8O90+C/AD5b4qrr/uxbT6OTpaKbZ2Jwy4Uz3085C9AYUdu9ljC446fP2h4IQEtdqiqKmy/PdjYkTgnN9FeosT+x/HOB3pmF2sKJf/wuekLsp5cL3l66qBCWz3IuP1SBW/gGJe8cB/OoyNlI6maqIFniAPaZtX6eCV5XJPu7GhvJXGBgfTyV341NIqtpZPZ6iCJw2HNhbSt7IAJ1opnezXLblewmq3zBaipGKHnQySTdv/A13aMx/xgVXVtGbkOmGLZGwFJ2ozLXMN+N/O+PUYVRVRHwGtJ3XdtRhyrDhLh5zTWkmN919AKKORjh0vy2XJV4xeNQwrnc6XY6TGwW6zJtKBPuV30zjCYtWY8gJXkXPHuRtEbRkdidL+YTOHRdMpATj2yGr31il2naMV12gG4NsaXNzN6qfPwGkifqvYA51GCHUUhGhnYpakYzhBfeDj9eo/w0dDmqh+O</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    <category term="上位机串口的简单使用" scheme="https://yjxdl.github.io/categories/%E4%B8%8A%E4%BD%8D%E6%9C%BA%E4%B8%B2%E5%8F%A3%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="PLC" scheme="https://yjxdl.github.io/tags/PLC/"/>
    
  </entry>
  
  <entry>
    <title>C#通过S7.Net读取西门子PLC数据</title>
    <link href="https://yjxdl.github.io/2022/09/30/CAPP/Csharp%E8%BF%9E%E6%8E%A5PLC/"/>
    <id>https://yjxdl.github.io/2022/09/30/CAPP/Csharp%E8%BF%9E%E6%8E%A5PLC/</id>
    <published>2022-09-30T01:53:49.000Z</published>
    <updated>2022-09-30T09:08:26.935Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    <category term="C#连接PLC" scheme="https://yjxdl.github.io/categories/C-%E8%BF%9E%E6%8E%A5PLC/"/>
    
    
    <category term="C#" scheme="https://yjxdl.github.io/tags/C/"/>
    
    <category term="PLC" scheme="https://yjxdl.github.io/tags/PLC/"/>
    
  </entry>
  
  <entry>
    <title>C#使用Redis</title>
    <link href="https://yjxdl.github.io/2022/06/22/SelfLearning/CSharp%E4%BD%BF%E7%94%A8Redis/"/>
    <id>https://yjxdl.github.io/2022/06/22/SelfLearning/CSharp%E4%BD%BF%E7%94%A8Redis/</id>
    <published>2022-06-22T12:42:45.000Z</published>
    <updated>2022-06-22T13:23:50.673Z</updated>
    
    <content type="html"><![CDATA[<style>h2{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{    background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}</style><h2 id="Redis管理工具"><a href="#Redis管理工具" class="headerlink" title="Redis管理工具"></a>Redis管理工具</h2><ul><li><strong>百度网盘下载Redis管理工具</strong><br>链接：<a href="https://pan.baidu.com/s/1rTtHzT-pP0MoDejBGgVNzw">https://pan.baidu.com/s/1rTtHzT-pP0MoDejBGgVNzw</a><br>提取码：1234</li><li><strong>编辑连接设置</strong><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206222038471.png"></li></ul><p><strong>连接成功会显示</strong><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206222038975.png"></p><ul><li><strong>注意这里要打开Redis命令窗口</strong><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206222121473.png"></li><li><strong>C#使用Redis示例</strong></li></ul><ol><li>在NuGet中安装ServiceStack.Redis<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206222100196.png"></li><li>C#代码示例<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> ServiceStack.Redis;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CsharpRedisTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> RedisClient client = <span class="keyword">new</span> RedisClient(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            client.ChangeDb(<span class="number">1</span>);</span><br><span class="line">            List&lt;<span class="built_in">int</span>&gt; ls = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">            ls.Add(<span class="number">131</span>);</span><br><span class="line">            ls.Add(<span class="number">2567</span>);</span><br><span class="line">            ls.Add(<span class="number">5465</span>);</span><br><span class="line">            <span class="comment">//读取</span></span><br><span class="line">            <span class="built_in">string</span> name = client.Get&lt;String&gt;(<span class="string">&quot;name1&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> pwd = client.Get&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;password1&quot;</span>);</span><br><span class="line">            <span class="comment">//存储</span></span><br><span class="line">            client.Set&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;11&quot;</span>);</span><br><span class="line">            client.Set&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;22&quot;</span>);</span><br><span class="line">            <span class="comment">//存list集合</span></span><br><span class="line">            client.Set&lt;List&lt;<span class="built_in">int</span>&gt;&gt;(<span class="string">&quot;1&quot;</span>, ls);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">C#使用Redis</summary>
    
    
    
    <category term="C#使用Redis" scheme="https://yjxdl.github.io/categories/C-%E4%BD%BF%E7%94%A8Redis/"/>
    
    
    <category term="C#" scheme="https://yjxdl.github.io/tags/C/"/>
    
    <category term="Redis" scheme="https://yjxdl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>模式学习</title>
    <link href="https://yjxdl.github.io/2022/06/16/SelfLearning/Refactoring/"/>
    <id>https://yjxdl.github.io/2022/06/16/SelfLearning/Refactoring/</id>
    <published>2022-06-16T05:34:45.000Z</published>
    <updated>2022-07-18T07:57:35.632Z</updated>
    
    <content type="html"><![CDATA[<style>h2{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{    background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}</style><h2 id="什么是重构？为什么要重构？"><a href="#什么是重构？为什么要重构？" class="headerlink" title="什么是重构？为什么要重构？"></a>什么是重构？为什么要重构？</h2><p>重构主要是改善现有程序的代码，使其使用更方便、简单的使用，提高可用性、可维护性。<br>重构的概念一般是指对类进行重构，一般在现有类的现有某些功能方法不能满足扩展需要，或者修复bug时，就需要重构。</p><h2 id="C-设计模式学习"><a href="#C-设计模式学习" class="headerlink" title="C# 设计模式学习"></a>C# 设计模式学习</h2><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>单一职责原则：就一个类而言，应该只有一个引起它变化的原因。如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会影响到其他的职责，另外，把多个职责耦合在一起，也会影响复用性。</li><li>开闭原则(Open-Closed Principle)：开闭原则即OCP（Open-Closed Principle缩写）原则，该原则强调的是：一个软件实体（指的类、函数、模块等）应该对扩展开放，对修改关闭。即每次发生变化时，要通过添加新的代码来增强现有类型的行为，而不是修改原有的代码。<br>符合开闭原则的最好方式是提供一个固有的接口，然后让所有可能发生变化的类实现该接口，让固定的接口与相关对象进行交互。</li><li>里氏代替原则(Liskov Substitution Principle)：　Liskov Substitution Principle,LSP（里氏代替原则）指的是子类必须替换掉它们的父类型。也就是说，在软件开发过程中，子类替换父类后，程序的行为是一样的。只有当子类替换掉父类后，此时软件的功能不受影响时，父类才能真正地被复用，而子类也可以在父类的基础上添加新的行为。为了就来看看违反了LSP原则的例子，具体代码如下所示：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Rectangle</span><br><span class="line">    &#123;</span><br><span class="line">        public virtual long Width &#123; get; set; &#125;</span><br><span class="line">        public virtual long Height &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 正方形</span><br><span class="line">    public class Square : Rectangle</span><br><span class="line">    &#123;</span><br><span class="line">        public override long Height</span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                return base.Height;</span><br><span class="line">            &#125;</span><br><span class="line">            set</span><br><span class="line">            &#123;</span><br><span class="line">                base.Height = value;</span><br><span class="line">                base.Width = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override long Width</span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                return base.Width;</span><br><span class="line">            &#125;</span><br><span class="line">            set</span><br><span class="line">            &#123;</span><br><span class="line">                base.Width = value;</span><br><span class="line">                base.Height = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> class Test</span><br><span class="line">    &#123;</span><br><span class="line">        public void Resize(Rectangle r)</span><br><span class="line">        &#123;</span><br><span class="line">            while (r.Height &gt;= r.Width)</span><br><span class="line">            &#123;</span><br><span class="line">                r.Width += 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        var r = new Square() &#123; Width = 10, Height = 10 &#125;;</span><br><span class="line">         new Test().Resize(r);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>上面的设计，正如上面注释的一样，在执行SmartTest的resize方法时，如果传入的是长方形对象，当高度大于宽度时，会自动增加宽度直到超出高度。但是如果传入的是正方形对象，则会陷入死循环。此时根本原因是，矩形不能作为正方形的父类，既然出现了问题，可以进行重构，使它们俩都继承于四边形类。重构后的代码如下所示：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 四边形</span><br><span class="line">    public abstract class Quadrangle</span><br><span class="line">    &#123;</span><br><span class="line">        public virtual long Width &#123; get; set; &#125;</span><br><span class="line">        public virtual long Height &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 矩形</span><br><span class="line">    public class Rectangle : Quadrangle</span><br><span class="line">    &#123;</span><br><span class="line">        public override long Height &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">        public override long Width &#123; get; set; &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    // 正方形</span><br><span class="line">    public class Square : Quadrangle</span><br><span class="line">    &#123;</span><br><span class="line">        public long _side;</span><br><span class="line"></span><br><span class="line">        public Square(long side)</span><br><span class="line">        &#123;</span><br><span class="line">            _side = side;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> class Test</span><br><span class="line">    &#123;</span><br><span class="line">        public void Resize(Quadrangle r)</span><br><span class="line">        &#123;</span><br><span class="line">            while (r.Height &gt;= r.Width)</span><br><span class="line">            &#123;</span><br><span class="line">                r.Width += 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var s = new Square(10);</span><br><span class="line"></span><br><span class="line">            new Test().Resize(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>依赖倒置原则:依赖倒置（Dependence Inversion Principle, DIP）原则指的是抽象不应该依赖于细节，细节应该依赖于抽象，也就是提出的 “面向接口编程，而不是面向实现编程”。这样可以降低客户与具体实现的耦合。</li><li>接口隔离原则:接口隔离原则（Interface Segregation Principle, ISP）指的是使用多个专门的接口比使用单一的总接口要好。也就是说不要让一个单一的接口承担过多的职责，而应把每个职责分离到多个专门的接口中，进行接口分离。过于臃肿的接口是对接口的一种污染。</li><li>合成复用原则:合成复用原则（Composite Reuse Principle, CRP）就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分。新对象通过向这些对象的委派达到复用已用功能的目的。简单地说，就是要尽量使用合成/聚合，尽量不要使用继承。要使用好合成复用原则，首先需要区分”Has—A”和“Is—A”的关系。“Is—A”是指一个类是另一个类的“一种”，是属于的关系，而“Has—A”则不同，它表示某一个角色具有某一项责任。导致错误的使用继承而不是聚合的常见的原因是错误地把“Has—A”当成“Is—A”.例如：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231058775.png"><br>实际上，雇员、经理、学生描述的是一种角色，比如一个人是“经理”必然是“雇员”。在上面的设计中，一个人无法同时拥有多个角色，是“雇员”就不能再是“学生”了，这显然不合理，因为现在很多在职研究生，即使雇员也是学生。<br>上面的设计的错误源于把“角色”的等级结构与“人”的等级结构混淆起来了，误把“Has—A”当作”Is—A”。具体的解决方法就是抽象出一个角色类：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231101491.png"></li><li>迪米特法则：迪米特法则（Law of Demeter，LoD）又叫最少知识原则（Least Knowledge Principle，LKP），指的是一个对象应当对其他对象有尽可能少的了解。也就是说，一个模块或对象应尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立，这样当一个模块修改时，影响的模块就会越少，扩展起来更加容易。　关于迪米特法则其他的一些表述有：只与你直接的朋友们通信；不要跟“陌生人”说话。外观模式（Facade Pattern)和中介者模式（Mediator Pattern）就使用了迪米特法则。<h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3>创建型模式就是用来创建对象的模式，抽象了实例化的过程。所有的创建型模式都有两个共同点。第一，它们都将系统使用哪些具体类的信息封装起来；第二，它们隐藏了这些类的实例是如何被创建和组织的。创建型模式包括单例模式、工厂方法模式、抽象工厂模式、建造者模式和原型模式。</li></ol><ul><li>单例模式：解决的是实例化对象的个数的问题，比如抽象工厂中的工厂、对象池等，除了Singleton之外，其他创建型模式解决的都是 new 所带来的耦合关系。</li><li>抽象工厂：创建一系列相互依赖对象，并能在运行时改变系列。</li><li>工厂方法：创建单个对象，在Abstract Factory有使用到。</li><li>原型模式：通过拷贝原型来创建新的对象。<br>工厂方法，抽象工厂, 建造者都需要一个额外的工厂类来负责实例化“一个对象”，而Prototype则是通过原型（一个特殊的工厂类）来克隆“易变对象”。<h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4>单例模式指的是确保某一个类只有一个实例，并提供一个全局访问点。解决的是实体对象个数的问题，而其他的建造者模式都是解决new所带来的耦合关系问题。其实现要点有：</li><li>类只有一个实例。问：如何保证呢？答：通过私有构造函数来保证类外部不能对类进行实例化</li><li>提供一个全局的访问点。问：如何实现呢？答：创建一个返回该类对象的静态方法<br>单例模式的结构图如下所示：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231111900.png"><br>单例的实现方式有很多种，但从最简单的实现（非延迟加载，非线程安全，效率低下），到可延迟加载，线程安全，且高效的实现，它们都有一些基本的共同点：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. 单例类都只有一个private的无参构造函数</span><br><span class="line">. 类声明为sealed（不是必须的）</span><br><span class="line">. 类中有一个静态变量保存着所创建的实例的引用</span><br><span class="line">. 单例类会提供一个静态方法或属性来返回创建的实例的引用（eg.GetInstance）</span><br></pre></td></tr></table></figure>单例模式（Singleton Pattern）是一种常用的模式，有一些对象我们往往只需要一个，比如全局缓存、浏览器中的 window 对象等。单例模式用于保证一个类仅有一个实例，并提供一个访问它的全局访问点。<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 单例模式线程安全</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton _instance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _lock = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">lock</span> (_lock)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        _instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                        _instance.Value = <span class="keyword">value</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Value &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestSingleton</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Singleton singleton = Singleton.GetInstance(<span class="keyword">value</span>);</span><br><span class="line">            Console.WriteLine(singleton.Value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// The client code.</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(</span><br><span class="line">                <span class="string">&quot;&#123;0&#125;\n&#123;1&#125;\n\n&#123;2&#125;\n&quot;</span>,</span><br><span class="line">                <span class="string">&quot;If you see the same value, then singleton was reused (yay!)&quot;</span>,</span><br><span class="line">                <span class="string">&quot;If you see different values, then 2 singletons were created (booo!!)&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RESULT:&quot;</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            Thread process1 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                TestSingleton(<span class="string">&quot;FOO&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            Thread process2 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                TestSingleton(<span class="string">&quot;BAR&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            process1.Start();</span><br><span class="line">            process2.Start();</span><br><span class="line"></span><br><span class="line">            process1.Join();</span><br><span class="line">            process2.Join();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h4>建造者模式（Builder Pattern）将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。<br>一辆小汽车 🚗 通常由 发动机、底盘、车身和电气设备 四大部分组成。汽车电气设备的内部构造很复杂，简单起见，我们只考虑三个部分：引擎、底盘和车身。<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231459423.png"><br>在现实生活中，小汽车也是由不同的零部件组装而成，比如上图中我们把小汽车分成引擎、底盘和车身三大部分。下面我们来看一下如何使用建造者模式来造车子。<h2 id="B站学习"><a href="#B站学习" class="headerlink" title="B站学习"></a>B站学习</h2><h3 id="单一职责原则实例及总结"><a href="#单一职责原则实例及总结" class="headerlink" title="单一职责原则实例及总结"></a>单一职责原则实例及总结</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231526571.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231527965.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231528006.png"><h3 id="开放封装远哲分析与介绍"><a href="#开放封装远哲分析与介绍" class="headerlink" title="开放封装远哲分析与介绍"></a>开放封装远哲分析与介绍</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231547707.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231549783.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231551790.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231555786.png"><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231650826.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231651247.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231706104.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231708726.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231709829.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231709954.png"><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231745761.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231751695.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231751915.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231752800.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231754280.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231755193.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231756085.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231758482.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231800715.png"><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206250922711.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206250923816.png"><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206260048024.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261355681.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261356202.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261357222.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261359941.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261359601.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261400705.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261405592.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261413450.png"><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261428690.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261429666.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261432012.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261432653.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261433597.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261434887.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261434915.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261437810.png"><h3 id="面向对象设计六大原则总结"><a href="#面向对象设计六大原则总结" class="headerlink" title="面向对象设计六大原则总结"></a>面向对象设计六大原则总结</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261524208.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261528252.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261529633.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261533571.png"><h3 id="Factory-Design-Pattern"><a href="#Factory-Design-Pattern" class="headerlink" title="Factory Design Pattern"></a>Factory Design Pattern</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261540559.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261541342.png"></li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202207181555773.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202207181556520.png"></p>]]></content>
    
    
    <summary type="html">学习笔记</summary>
    
    
    
    <category term="关于模式的学习" scheme="https://yjxdl.github.io/categories/%E5%85%B3%E4%BA%8E%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C#" scheme="https://yjxdl.github.io/tags/C/"/>
    
    <category term="模式" scheme="https://yjxdl.github.io/tags/%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C#面向对象的学习笔记</title>
    <link href="https://yjxdl.github.io/2022/06/08/CAPP/CSharp%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yjxdl.github.io/2022/06/08/CAPP/CSharp%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-06-08T06:59:40.000Z</published>
    <updated>2022-09-30T02:28:04.507Z</updated>
    
    <content type="html"><![CDATA[<style>h2{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{    background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}</style><h2 id="C-继承机制"><a href="#C-继承机制" class="headerlink" title="C#继承机制"></a>C#继承机制</h2><p>一个基类具备基本的特征，派生类除了具备基本特征外还具备特殊的特征。<br>C#继承机制：</p><ol><li>继承是面向对象技术最有特色、最重要、也是与传统编程方法最不同的。</li><li>继承表示了实体间的一种层次关系。<ul><li>基类（父类），派生类（子类）；</li><li>派生类可以继承基类的特征和能力，如属性和方法；</li><li>派生类还可以添加新的特性或者是修改已有的特性以满足特定的要求，但不能删除基类的成员；</li><li>一个父类可以有多个子类，父类是所有子类公共特征的集合，子类则是父类的特殊化。</li><li>C#中每个子类只能有一个基类，即不允许多重继承。</li></ul></li><li>继承的好处：实现了代码的重用。</li><li>派生类可以继承基类中除构造函数和析构函数外的所有可访问的成员。</li><li>访问修饰符protected的作用：子类可以访问，其他的类都不可以访问。</li><li>继承是可传递的</li><li>基类与派生类之间的转换：可以分为隐式转换和显式转换。<ul><li>隐式转换：派生类-&gt;基类</li><li>显式转换：基类-&gt;派生类（有条件），反过来基类向派生对象转换过程就没有这么顺利。<figure class="highlight c#"><figcaption><span>派生类向基类转换</span></figcaption><table><tr><td class="code"><pre><span class="line">People p = <span class="keyword">new</span> People();</span><br><span class="line">Animal a = p;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><figcaption><span>基类向派生类转换,无法编译通过</span></figcaption><table><tr><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">People p = a;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><figcaption><span>基类向派生类转换,做强制类型转换，会抛出异常：InvalidCastException</span></figcaption><table><tr><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">People p = (People)a;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><figcaption><span>基类向派生类转换,做强制类型转换，进一步改造</span></figcaption><table><tr><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> People();</span><br><span class="line">People p = (People)a;</span><br></pre></td></tr></table></figure><h3 id="继承的好处，在程序中的体现"><a href="#继承的好处，在程序中的体现" class="headerlink" title="继承的好处，在程序中的体现"></a>继承的好处，在程序中的体现</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基类</span></span><br><span class="line">Class Animal</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="built_in">int</span> brseval;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    Animal_fun1()</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//定义</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//派生类</span></span><br><span class="line">Class Dog:Animal</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="built_in">int</span> derivedvars;</span><br><span class="line">    <span class="comment">//成员函数</span></span><br><span class="line">    Dog_fun1()</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//定义</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">    d.Animal_fun1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>派生类Dog继承基类Animal后，基类的一部分成员就可以被派生类使用，比如基类中的Animal_fun1这个方法，在派生类中无须再定义。d对象是派生类Dog的对象，它就可以直接使用d.Animal_fun1这个方法。<br>继承的好处是无须重新编写代码，维护方便。<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Class Animal</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//成员变量</span></span><br><span class="line">   <span class="built_in">int</span> eyes,mouth;</span><br><span class="line">   Animal()</span><br><span class="line">   &#123;</span><br><span class="line">      eyes = <span class="number">2</span>;</span><br><span class="line">      mouth = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   PetAnimal()</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="comment">//定义</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">Class Cat:Animal</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//成员变量</span></span><br><span class="line">   <span class="comment">//成员函数</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Barking</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">   <span class="comment">//定义</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>继承的过程中，不允许实现多重继承，但允许多重接口实现。多重继承指的是一个类即继承了A，有继承了B，因为类A和类B在成员上可能存在着矛盾，所以不允许实现多继承。而接口我们在后面会讲到，它不需要实现它的成员，只要在继承的类里面去实现具体成员，所以允许多重接口实现。<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Duck</span>:<span class="title">Animal</span>,<span class="title">Bird</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//允许多重接口实现</span></span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="comment">//成员函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例学习：类的继承"><a href="#案例学习：类的继承" class="headerlink" title="案例学习：类的继承"></a>案例学习：类的继承</h3>本案例要求编写一个程序，程序中定义”动物”这个类，然后再定义一个”狗”类，狗类要继承动物这个类。在狗对象实例化的同时，调用base构造函数为狗对象赋予类型、数量等信息。在此基础上加一个“宠物类”,要求一个区别，不同于其他一般的看家狗的方法。代码如下：<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">            dog.GetInfo();</span><br><span class="line">            dog.DispInfo();<span class="comment">//描述信息</span></span><br><span class="line">            dog.GetData();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> style;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> number;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetInfo</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请输入动物的类型和数量：&quot;</span>);</span><br><span class="line">                style = Console.ReadLine();</span><br><span class="line">                number = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DispInfo</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;该动物的类型为&#123;0&#125;,数量为&#123;1&#125;&quot;</span>, style, number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> weight;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> color;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> hobby;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetData</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请输入狗的年龄：&quot;</span>);</span><br><span class="line">                age = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请分别输入狗的体重，颜色和爱好：&quot;</span>);</span><br><span class="line">                weight = Console.ReadLine();</span><br><span class="line">                color = Console.ReadLine();</span><br><span class="line">                hobby = Console.ReadLine();</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;该狗的特征为：&#123;0&#125;，&#123;1&#125;，&#123;2&#125;&quot;</span>, weight, color, hobby);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果显示为：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206082129155.png"><br>程序中，dog是派生类Dog的对象，它调用的方法GetInfo和DispInfo都是从基类Animal中继承过来的。因为在Animal类中已经实现了这两个方法，所以，无须在类Dog中实现这两个方法。而GetData方法在类Animal中没有，是Dog类中自己从成员，所以需要在Dog类中实现。<br>在此基础上加一个“宠物类”,要求一个区别，不同于其他一般的看家狗的方法。代码如下：<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Dog dog = new Dog();</span></span><br><span class="line">            <span class="comment">//dog.GetInfo();</span></span><br><span class="line">            <span class="comment">//dog.DispInfo();//描述信息</span></span><br><span class="line">            <span class="comment">//dog.GetData();</span></span><br><span class="line">            PetDog dog = <span class="keyword">new</span> PetDog();</span><br><span class="line">            dog.GetInfo();</span><br><span class="line">            dog.DispInfo();</span><br><span class="line">            dog.GetData();</span><br><span class="line">            dog.GetDiff();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> style;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> number;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetInfo</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请输入动物的类型和数量：&quot;</span>);</span><br><span class="line">                style = Console.ReadLine();</span><br><span class="line">                number = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DispInfo</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;该动物的类型为&#123;0&#125;,数量为&#123;1&#125;&quot;</span>, style, number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> weight;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> color;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> hobby;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetData</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请输入狗的年龄：&quot;</span>);</span><br><span class="line">                age = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请分别输入狗的体重，颜色和爱好：&quot;</span>);</span><br><span class="line">                weight = Console.ReadLine();</span><br><span class="line">                color = Console.ReadLine();</span><br><span class="line">                hobby = Console.ReadLine();</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;该狗的特征为：&#123;0&#125;，&#123;1&#125;，&#123;2&#125;&quot;</span>, weight, color, hobby);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PetDog</span> : <span class="title">Dog</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetDiff</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;宠物狗比一般的看家狗更干净，更时尚&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206082142094.png"><h3 id="案例学习：Base的应用"><a href="#案例学习：Base的应用" class="headerlink" title="案例学习：Base的应用"></a>案例学习：Base的应用</h3>在继承的过程中，经常会遇到一个关键字base。它的作用：</li></ul><ol><li>用于从派生类中访问基类成员。</li><li>可以使用base关键字调用基类的构造函数<br>下面的代码定义了一个”动物”这个类，然后再定义一个”狗”类，狗类要继承动物这个类。在狗对象实例化的同时，调用base构造函数为狗对象赋予类型、数量等信息。<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Dog dog = <span class="keyword">new</span> Dog(<span class="string">&quot;狂暴型&quot;</span>, <span class="number">50</span>, <span class="string">&quot;咬沙发&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> _style;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> _number;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Animal</span>(<span class="params"><span class="built_in">string</span> style,<span class="built_in">int</span> number</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._style = style;</span><br><span class="line">                <span class="keyword">this</span>._number = number;</span><br><span class="line">                Console.WriteLine(_style);</span><br><span class="line">                Console.WriteLine(_number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dog</span>:<span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> character;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">string</span> style, <span class="built_in">int</span> number, <span class="built_in">string</span> character</span>) : <span class="title">base</span>(<span class="params">style, number</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.character = character;</span><br><span class="line">                Console.WriteLine(character);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206090944438.png"><br>这个程序在对Dog对象实例化时，将style和number的值传递给通过base调用的Animal构造函数，这样完成了对类型、数量等信息的赋值操作。<h2 id="C-多态机制"><a href="#C-多态机制" class="headerlink" title="C#多态机制"></a>C#多态机制</h2>课堂上，老师给出很多个函数，它们的作用都是比较大小。这些函数的名称都相同，不同的是参数类型，个数和函数的返回值。过后，老师又给出一大堆数据，它们又整型、单精度、双精度等。而同学们要根据这些数据找出相应的函数，最终根据那个函数判断大小。这就是多态的原理。</li></ol></li></ol><ul><li>C#多态机制<ul><li>多态：多态的意思是事物就有不同形式的能力。例如，对不同的实例，某个操作可能会有不同的行为。这个行为依赖于所要操作数据的类型。</li><li>多态：用同样一个语句，执行不同的操作。</li><li>多态机制使用具有不同内部结构的对象可以共享相同的外部接口。</li></ul></li><li>如何实现多态？<ul><li>C#中有两种实现多态的方法<ul><li>通过继承实现多态</li><li>通过重载实现多态</li></ul></li><li>通过继承，可以用两种方法实现多态<ul><li>重写基类的虚方法（虚方法重写）</li><li>重写基类的抽象方法</li></ul></li></ul></li><li>对基类虚方法的重写涉及的问题<ul><li>基类和派生类中定义完全相同的两个方法<ul><li>方法名相同</li><li>对应的参数相同</li><li>返回值相同</li></ul></li><li>语法规定<ul><li>基类的方法必须用virtual修饰符定义为虚方法</li><li>派生类必须用override修饰符重新定义该方法</li></ul></li><li>与非虚方法的比较</li><li>虚方法调用的特点：由对象变量所引用的对象来决定执行哪一个方法，而与对象变量本身的类型无关。</li><li>方法重写是实现多态的一种方法。<h3 id="方法重写案例：基类虚方法重写的应用"><a href="#方法重写案例：基类虚方法重写的应用" class="headerlink" title="方法重写案例：基类虚方法重写的应用"></a>方法重写案例：基类虚方法重写的应用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            circle pan = <span class="keyword">new</span> circle();</span><br><span class="line">            pan.L();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;圆的面积为&#123;0&#125;&quot;</span>, pan.S());</span><br><span class="line">            earth e = <span class="keyword">new</span> earth();</span><br><span class="line">            e.L();            </span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">circle</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line">            <span class="built_in">double</span> r = <span class="number">0.0</span>;</span><br><span class="line">            <span class="function"><span class="keyword">virtual</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">L</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请输入圆的半径：&quot;</span>);</span><br><span class="line">                r = <span class="built_in">double</span>.Parse(Console.ReadLine());</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;圆的周长为&#123;0&#125;&quot;</span>, <span class="number">2</span> * pi * r);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">S</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(<span class="string">&quot;请输入圆的半径：&quot;</span>);</span><br><span class="line">                r = <span class="built_in">double</span>.Parse(Console.ReadLine());</span><br><span class="line">                <span class="keyword">return</span> pi * r * r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">earth</span>:<span class="title">circle</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> brand;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">L</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;地球仪的品牌是：&quot;</span>);</span><br><span class="line">                brand = Console.ReadLine();</span><br><span class="line">                <span class="keyword">base</span>.L();</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0&#125;牌的地球仪还不错&quot;</span>, brand);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>程序中首先定义一个基类circle表示<br>输出结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206091041193.png"><h3 id="案例学习：基类非虚方法的重写的应用-方法的隐藏"><a href="#案例学习：基类非虚方法的重写的应用-方法的隐藏" class="headerlink" title="案例学习：基类非虚方法的重写的应用(方法的隐藏)"></a>案例学习：基类非虚方法的重写的应用(方法的隐藏)</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            People p = <span class="keyword">new</span> People();</span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            People pc = s;</span><br><span class="line">            p.HideFun();</span><br><span class="line">            s.HideFun();</span><br><span class="line">            pc.HideFun();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">People</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HideFun</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;人类的HideFun方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span>:<span class="title">People</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HideFun</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;学生类的HideFun方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在该程序中，基类和派生类都定义了方法HideFun,如果用基类对象调用该方法则输出父类People的HideFun方法，如果是派生类对象调用该方法则输出子类Student的HideFun方法。也就是说，在继承的过程中，派生类的方法将同名的基类方法隐藏了。<br>结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206091053360.png"><br>实际上pc引用的是Student，因此本质是Student。能否执行Student的HideFun？如果不能，那么我又怎样执行Student的HideFun？<br>基类和派生类的方法关系表</li></ul></li></ul><table><thead><tr><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">扩充</td><td align="left">是派生类新增的，基类没有</td></tr><tr><td align="left">重载</td><td align="left">派生类中又与基类同名的方法，但参数类型或个数不同</td></tr><tr><td align="left">完全相同</td><td align="left">派生类中定义了一个与基类相同的方法，即方法的原型完全相同</td></tr><tr><td align="left">隐藏</td><td align="left">可以声明与继承而来的同名成员</td></tr><tr><td align="left">重写</td><td align="left">基类的方法，属性，索引器重新定义，而成员名和相应的参数都不变</td></tr><tr><td align="left">调用</td><td align="left">用base调用基类的方法</td></tr></tbody></table><h3 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h3><p>抽象类和抽象方法，访问修饰符用abstract。<br>语法：</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ClassOne</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//类实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>含有抽象类的方法是抽象类，抽象类可以没有抽象方法。抽象类是派生类的基类，不能实例化。抽象方法在抽象类里面不能实现。在派生类中，抽象方法等抽象成员必须被重写并实现。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Animal</span> <span class="comment">//抽象类</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">int</span> legs;<span class="comment">//成员变量</span></span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">base</span>(<span class="params">parameters</span>)</span>;<span class="comment">//抽象函数   </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Dog</span>:<span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">int</span> eyes;<span class="comment">//成员变量</span></span><br><span class="line">   <span class="function"><span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Base</span>(<span class="params">parameters</span>) <span class="comment">//成员函数，必须重写</span></span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">//实际实现</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态还分为运行时多态性和编译时多态性。</p><ol><li>运行时多态性是通过继承和虚函数来实现的。运行时的多态性是指系统在编译时不确定选用哪个重载方法，而是直到程序运行时，才根据实际情况决定采用哪个重载方法。</li><li>编译时的多态性具有运行速度快的特点，而运行时的多态性则具有极大的灵活性。<h3 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h3>这个方法允许用户定义的类型如结构和类，为使它们的对象易于操作而使用重载操作符。<br>如何实现操作符的重载？</li><li>运算符的重载实质上就是函数重载。</li><li>运算符的函数表示法</li></ol><table><thead><tr><th>运算符</th><th>函数表示法</th></tr></thead><tbody><tr><td>op x</td><td>operator op(x)</td></tr><tr><td>x op</td><td>operator op(x)</td></tr><tr><td>x op y</td><td>operator op(x,y)</td></tr></tbody></table><ol start="3"><li>语法规定<ul><li>允许重载运算符</li><li>必须是public和static</li><li>至少有一个参数是类自身</li><li>可以被重载的操作符如下表所示</li></ul></li></ol><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>+,-,!,~,++,–</td><td>这些一元操作符需要一个操作数，可以被重载</td></tr><tr><td>+,-,*,/,%</td><td>这些二元操作符需要两个操作数，可以被重载</td></tr><tr><td>==,!=,&lt;,&gt;,&lt;=,&gt;=</td><td>比较操作符可以被重载</td></tr><tr><td>&amp;&amp;,//</td><td>条件逻辑操作符不能被直接重载，但是它使用&amp;和/它们可以求值，被重载</td></tr><tr><td>+=,-=,*=,/=,%=</td><td>赋值操作符不能被重载</td></tr><tr><td>=,.,?:,-&gt;,new,is,sizeof,typeof</td><td>这些操作符不能被重载</td></tr></tbody></table><h3 id="案例学习：运算符的应用"><a href="#案例学习：运算符的应用" class="headerlink" title="案例学习：运算符的应用"></a>案例学习：运算符的应用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_2</span>运算符重载的应用</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 在这个程序中，+号被重载，被重载的+号可以用来计算TwoD类型对象的相加，还可以计算TwoD类型对象与整数类型的相加操作。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">class</span> <span class="title">TwoD</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> x;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> X</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> y;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Y</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> y;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">TwoD</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                x = y = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">TwoD</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                x = a;</span><br><span class="line">                y = b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> TwoD <span class="keyword">operator</span> +(TwoD op1, TwoD op2)</span><br><span class="line">            &#123;</span><br><span class="line">                TwoD result = <span class="keyword">new</span> TwoD();</span><br><span class="line">                result.x = op1.x + op2.x;</span><br><span class="line">                result.y = op1.y + op2.y;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> TwoD <span class="keyword">operator</span> +(TwoD op1, <span class="built_in">int</span> op2)</span><br><span class="line">            &#123;</span><br><span class="line">                TwoD result = <span class="keyword">new</span> TwoD();</span><br><span class="line">                result.x = op1.x + op2;</span><br><span class="line">                result.y += op1.x + op2;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;x坐标：&#123;0&#125;,y坐标：&#123;1&#125;&quot;</span>,X, Y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TwoD t1 = <span class="keyword">new</span> TwoD(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            TwoD t2 = <span class="keyword">new</span> TwoD(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">            t1 = t1 + t2;</span><br><span class="line">            Console.WriteLine(t1);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面这个程序里，+号被重载，被重载的+号可以用来计算TwoD类型对象的相加，还可以计算TwoD类型对象与整数类型的相加操作。</p><h3 id="案例：函数重载另外一个实例"><a href="#案例：函数重载另外一个实例" class="headerlink" title="案例：函数重载另外一个实例"></a>案例：函数重载另外一个实例</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_2</span>运算符重载的应用2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">TwoD</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> x;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> X</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> y;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Y</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> y;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">TwoD</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                x = y = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">TwoD</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                x = a;</span><br><span class="line">                y = b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> TwoD <span class="keyword">operator</span> +(TwoD op1, TwoD op2)</span><br><span class="line">            &#123;</span><br><span class="line">                TwoD result = <span class="keyword">new</span> TwoD();</span><br><span class="line">                result.x = op1.x + op2.x;</span><br><span class="line">                result.y = op1.y + op2.y;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> TwoD <span class="keyword">operator</span> +(TwoD op1, <span class="built_in">int</span> op2)</span><br><span class="line">            &#123;</span><br><span class="line">                TwoD result = <span class="keyword">new</span> TwoD();</span><br><span class="line">                result.x = op1.x + op2;</span><br><span class="line">                result.y += op1.x + op2;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;x坐标：&#123;0&#125;,y坐标：&#123;1&#125;&quot;</span>, X, Y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">ThreeD</span> : <span class="title">TwoD</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> z;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">ThreeD</span>() : <span class="title">base</span>()</span> &#123; z = <span class="number">0</span>; &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">ThreeD</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b, <span class="built_in">int</span> c</span>) : <span class="title">base</span>(<span class="params">a, b</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                z = c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Z</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> z;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> ThreeD <span class="keyword">operator</span> +(ThreeD op1, ThreeD op2)</span><br><span class="line">            &#123;</span><br><span class="line">                ThreeD result = <span class="keyword">new</span> ThreeD(op1.X + op2.X, op1.Y + op2.Y, op1.z + op2.z);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> ThreeD <span class="keyword">operator</span> ++(ThreeD op1)</span><br><span class="line">            &#123;</span><br><span class="line">                ThreeD result = <span class="keyword">new</span> ThreeD(op1.X + <span class="number">1</span>, op1.Y + <span class="number">1</span>, op1.z + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> ==(ThreeD op1, ThreeD op2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((op1.X == op2.X) &amp;&amp; (op1.Y == op2.Y) &amp;&amp; (op1.z == op2.z))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> !=(ThreeD op1, ThreeD op2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((op1.X != op2.X) || (op1.Y != op2.Y) || (op1.z != op2.z))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;,z坐标：&#123;1&#125;&quot;</span>, <span class="keyword">base</span>.ToString(), z);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            ThreeD threeD1 = <span class="keyword">new</span> ThreeD(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            ThreeD threeD2 = <span class="keyword">new</span> ThreeD(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">            ThreeD threeD3 = threeD1 + threeD2;</span><br><span class="line">            <span class="keyword">if</span> (threeD1 == threeD2)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;这两个数值一样！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;这两个数值不同&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(threeD3);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个程序中，+、++、==、!=符号被重载。</p><ol><li>操作符重载为C#操作符应用到用户定义的数据类型提供了额外的能力。</li><li> 仅预定义的C#操作符可以被重载。<br>运算结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206091821428.png"><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2>对于接口的理解，首先我们看一个生活小例子。对于生活中的开关，它需要ON和OFF两种方法。<br>其他开关也涉及ON、OFF两个方法，但是它们的实现与前面提到的开关不一样。所以我们在定义开关这种数据结构的时候，不能直接实现，必须根据开关来决定怎样实现ON，OFF方法。<br>在这种情况下，我们可以把开关定义为接口，比如命名为ISwitch。在接口里定义两个方法ON和OFF，这两个方法只定义不实现。<h3 id="案例学习：接口的应用"><a href="#案例学习：接口的应用" class="headerlink" title="案例学习：接口的应用"></a>案例学习：接口的应用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_3</span>接口的用法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Button bt = <span class="keyword">new</span> Button();</span><br><span class="line">            bt.On();</span><br><span class="line">            bt.Off();</span><br><span class="line">            onOffSwitch oos = <span class="keyword">new</span> onOffSwitch();</span><br><span class="line">            oos.On();</span><br><span class="line">            oos.Off();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISwitch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">On</span>()</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Off</span>()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">onOffSwitch</span>:<span class="title">ISwitch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">On</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;顺时针转动！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Off</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;逆时针转动！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Button</span>:<span class="title">ISwitch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">On</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;开启！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Off</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;关闭！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果显示如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206091939763.png"></li><li>实现接口基本步骤：<ul><li>定义接口: 接口定义了规则</li><li>实现接口: 类实现了接口的规则</li></ul></li><li>接口是引用类型：<ul><li>关键字interface</li><li>接口的成员有：属性、方法、事件和索引器。</li><li>接口中定义的成员只有声明，没有实现</li><li>接口中的成员都隐式地具有public访问属性接口的定义。<h3 id="案例学习：定义接口的应用"><a href="#案例学习：定义接口的应用" class="headerlink" title="案例学习：定义接口的应用"></a>案例学习：定义接口的应用</h3>下面的案例演示了定义接口的用法：<br>value 关键字用于定义set取值函数分配的值。<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_3</span>用类实现接口的应用</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MyPoint p = <span class="keyword">new</span> MyPoint(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;X = &#123;0&#125;,Y=&#123;1&#125;,Z=&#123;2&#125;&quot;</span>, p.X, p.Y, p.Z);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IPoint</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> X</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> Y</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> Z</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyPoint</span> : <span class="title">IPoint</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> myX;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> myY;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> myZ;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyPoint</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> z</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            myX = x;</span><br><span class="line">            myY = y;</span><br><span class="line">            myZ = z;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//实现IPoint接口中的属性</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> X</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> myX;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                myX = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Y</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> myY;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                myY = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Z</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> myZ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                myZ = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>案例输出的结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206100930383.png"><br>这个程序定义了一个表示点的接口IPoint.它有三个成员变量是X,Y和Z,这三个成员是属性，但在接口里只完成定义，不能实现。它们的实现的继承接口的类Mypoint中完成的。<br>用类实现接口：</li></ul></li><li>语法：与继承一样</li><li>规定：必须实现接口中声明的所有成员。<h3 id="案例学习：用类实现接口的应用"><a href="#案例学习：用类实现接口的应用" class="headerlink" title="案例学习：用类实现接口的应用"></a>案例学习：用类实现接口的应用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_3</span>用类实现接口的应用2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">            d.AnimalFun();</span><br><span class="line">            Student student = <span class="keyword">new</span> Student();</span><br><span class="line">            student.AnimalFun();</span><br><span class="line">            student.PeopleFun();</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IAnimal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">AnimalFun</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">People</span>:<span class="title">IAnimal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">PeopleFun</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Dog</span>:<span class="title">IAnimal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AnimalFun</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Dog类实现Animal接口的AnimalFun()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span> :<span class="title">People</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AnimalFun</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Student类实现Animal接口的AnimalFun()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PeopleFun</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Student类实现People接口的PeopleFun()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206100950832.png"><br>接口与继承：</li><li>接口的继承<ul><li>接口可以继承</li><li>接口可以从多个基接口继承，类不允许多重继承</li></ul></li><li>类的继承、实现接口的类<ul><li>相同的语法：类的继承，类实现接口</li><li>类不能多重继承</li><li>类可以实现多个接口，C#可以通过接口来实现多重继承</li><li>规则：类的基列表中可以同时包含基类和接口，但基类应列在首位。<h3 id="案例学习：接口与继承的应用"><a href="#案例学习：接口与继承的应用" class="headerlink" title="案例学习：接口与继承的应用"></a>案例学习：接口与继承的应用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_3</span>接口与继承的应用1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//实现接口的Animal的类Dog</span></span><br><span class="line">            Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">            <span class="comment">//运行错误，抛出InvalidCastException异常</span></span><br><span class="line">            <span class="comment">//People p = (People)a;</span></span><br><span class="line">            <span class="comment">//实现接口People的类Student,People接口从Animal接口继承</span></span><br><span class="line">            Animal a1 = <span class="keyword">new</span> Student();</span><br><span class="line">            a1.AnimalFun();</span><br><span class="line">            People p1 = (People)(a1);</span><br><span class="line">            p1.PeopleFun();</span><br><span class="line">            People p2 = <span class="keyword">new</span> Student();</span><br><span class="line">            p2.PeopleFun();</span><br><span class="line">            Animal a2 = (Animal)p2;</span><br><span class="line">            a2.AnimalFun();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">interface</span> <span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">AnimalFun</span>()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">interface</span> <span class="title">People</span>:<span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">PeopleFun</span>()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">Dog</span>:<span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AnimalFun</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Dog类实现Animal接口的AnimalFun()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span>:<span class="title">People</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AnimalFun</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Student类实现Animal接口的AnimalFun()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PeopleFun</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Student类实现People接口的PeopleFun()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206101023368.png"><br>接口的应用：</li></ul></li><li>用接口实现多重继承。</li><li>用接口实现多态。<h3 id="案例学习：用接口实现多重继承"><a href="#案例学习：用接口实现多重继承" class="headerlink" title="案例学习：用接口实现多重继承"></a>案例学习：用接口实现多重继承</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_3</span>用接口实现多重继承1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Duck duck = <span class="keyword">new</span> Duck();</span><br><span class="line">            duck.CanbeEaten();</span><br><span class="line">            duck.CanFly();</span><br><span class="line">            duck.CanSwimming();</span><br><span class="line">            duck.LittleAnimal();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">LittleAnimal</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">Bird1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">CanFly</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Bird2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">CanFly</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">Swim</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">CanSwimming</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">Food</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">CanbeEaten</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Duck</span> : <span class="title">Bird2</span>, <span class="title">Animal</span>, <span class="title">Swim</span>, <span class="title">Food</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LittleAnimal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸭子是一个小动物.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CanSwimming</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸭子会游泳.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CanbeEaten</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸭子可以做成北京烤鸭吃.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//public void CanFly()</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    Console.WriteLine(&quot;鸭子可以飞&quot;);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">CanFly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸭子会飞哦。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206101044837.png"><h3 id="案例学习：用接口实现多态"><a href="#案例学习：用接口实现多态" class="headerlink" title="案例学习：用接口实现多态"></a>案例学习：用接口实现多态</h3>看一下接口多态是如何实现的？一个生活中的例子：猫、狗、猴子可以跑。编写代码如下：<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_3</span>用接口实现多态</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Run[] runs = <span class="keyword">new</span> Run[<span class="number">3</span>];</span><br><span class="line">            runs[<span class="number">0</span>] = <span class="keyword">new</span> Cat();</span><br><span class="line">            runs[<span class="number">1</span>] = <span class="keyword">new</span> Dog();</span><br><span class="line">            runs[<span class="number">2</span>] = <span class="keyword">new</span> Monkey();</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> r1 <span class="keyword">in</span> runs)</span><br><span class="line">            &#123;</span><br><span class="line">                r1.Run();</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Run</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Run</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Cat</span>:<span class="title">Run</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;小猫可以在屋檐上奔跑！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Run</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;小狗可以在原野上奔跑!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Monkey</span>:<span class="title">Run</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;猴子可以在树林间奔跑!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206101109264.png"><h3 id="案例学习：抽象类的应用"><a href="#案例学习：抽象类的应用" class="headerlink" title="案例学习：抽象类的应用"></a>案例学习：抽象类的应用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_3</span>抽象类的应用</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">            cat.animal();</span><br><span class="line">            Duck duck = <span class="keyword">new</span> Duck();</span><br><span class="line">            duck.animal();</span><br><span class="line">            duck.Fly();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">animal</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Fly</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Fly</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">animal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;猫是一种可爱的小动物!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Duck</span> : <span class="title">Animal</span>, <span class="title">Fly</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">animal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸭子是禽类动物!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸭子会飞哦！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206101121876.png"><br>抽象类与接口的比较表：</li></ol><table><thead><tr><th align="left">抽象类</th><th align="left">接口</th></tr></thead><tbody><tr><td align="left">无</td><td align="left">有属性、方法、事件和索引器</td></tr><tr><td align="left">可以有只声明的方法，也可以有完整的方法</td><td align="left">方法都只有声明</td></tr><tr><td align="left">是对实体的抽象</td><td align="left">是对行为的抽象，规定行为的准则</td></tr><tr><td align="left">子类与抽象类，概念上是一致的</td><td align="left">实现接口的类与接口，在概念上是不同的</td></tr></tbody></table><p>多重接口实现:</p><ol><li>C#不允许有多重类继承。</li><li>但C#允许多重接口实现</li><li>这意味着一个类可以实现多个接口。<br>在C#中，只要不发生命名冲突，就完全可以允许多重接口实现。<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPMainp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Apply</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IP</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Apply</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Myima</span>:<span class="title">Base</span>,<span class="title">IP</span>,<span class="title">IPMainp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Apply</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//使用显式接口实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2></li><li>事件的组成<ul><li>事件是一种发布消息的机制</li><li>事件的两个方面，发送方与接收方</li><li>发送方负责发布消息</li><li>接收方进行响应，即接收消息后进行必要的处理</li><li>发送方与接收方通过事件订阅建立关联</li></ul></li><li>C#中的事件<ul><li>C#中事件是类的成员</li><li>C#中事件是通过委托来实现的<br>发送方与接收方通过事件订阅建立关联，事件是类用来通知对象需要执行某种操作的方式。<h3 id="案例学习：事件应用"><a href="#案例学习：事件应用" class="headerlink" title="案例学习：事件应用"></a>案例学习：事件应用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_5</span>事件应用</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyD</span>(<span class="params"><span class="built_in">string</span> mess</span>)</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Publisher publisher = <span class="keyword">new</span> Publisher();</span><br><span class="line">            Receiver receiver1 = <span class="keyword">new</span> Receiver(<span class="string">&quot;李华&quot;</span>);</span><br><span class="line">            Receiver receiver2 = <span class="keyword">new</span> Receiver(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">            publisher.Event += receiver1.Method;</span><br><span class="line">            publisher.Event += receiver2.Method;</span><br><span class="line">            publisher.FireEvent(<span class="string">&quot;面试的时间到了&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//事件的发送者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Publisher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> MyD Event;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FireEvent</span>(<span class="params"><span class="built_in">string</span> notice</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Event != <span class="literal">null</span>) Event(notice);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//事件的接收者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Receiver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> _name;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Receiver</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="built_in">string</span>.Format(<span class="string">&quot;通知&#123;0&#125;,&#123;1&#125;&quot;</span>, _name, s));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果如下图所示:<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206101506764.png"><h3 id="如何实现事件的步骤"><a href="#如何实现事件的步骤" class="headerlink" title="如何实现事件的步骤"></a>如何实现事件的步骤</h3></li></ul></li></ol><table><thead><tr><th align="left">步骤</th><th align="left">说明</th><th align="left">位置</th></tr></thead><tbody><tr><td align="left">定义委托</td><td align="left">[访问修饰符] delegate 返回类型 委托名(参数列表)</td><td align="left"></td></tr><tr><td align="left">定义事件</td><td align="left">[访问修饰符] event 委托名 事件名</td><td align="left">发送方</td></tr><tr><td align="left">触发事件</td><td align="left">利用委托通知已订阅该事件的所有对象</td><td align="left">发送方</td></tr><tr><td align="left">订阅事件</td><td align="left">接收对象要向发送对象订阅事件，接收方与发送发建立关联</td><td align="left"></td></tr><tr><td align="left">定义响应，事件的方法</td><td align="left">对事件进行响应的方法(回调函数),该方法必须符合事件(委托)的要求</td><td align="left">接收方</td></tr></tbody></table><p>好处:事件的发送者不需要事先知道都有那些订阅者。<br>事件通信机制的优点:淡化了事件发送和事件接收两个对象之间的关系，使得两个对象之间不需要建立关联关系就可以进行通信(无连接)。<br>事件发送方:定义事件、触发事件。至于事件触发后做什么，事件发送方并不知道。<br>Windows窗体的事件机制，就是利用事件驱动的方式进行工作的。<br>Button的Click事件:</p><ul><li>发送方:Button事件</li><li>接收方:某个窗体<br>为事件编写处理程序(回调函数)<br>订阅事件:*.designer.cs </li><li>双击控件</li><li>属性窗口中的事件列表<h2 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h2>索引器是访问/修改类中的数据的一种方法:</li><li>像数组一样使用下标访问/修改类中的数据；</li><li>索引器下标可以是int，也可以是string<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line">[访问修饰符] 数据类型 <span class="keyword">this</span>[数据类型 标识符]</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">get</span>&#123;......&#125;</span><br><span class="line">   <span class="keyword">set</span>&#123;......&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="索引器-索引器的应用一"><a href="#索引器-索引器的应用一" class="headerlink" title="索引器:索引器的应用一"></a>索引器:索引器的应用一</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_6</span>索引器的应用一</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Point p = <span class="keyword">new</span> Point();</span><br><span class="line">            p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            p[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">            p[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">            Console.WriteLine(p[<span class="number">0</span>]);</span><br><span class="line">            Console.WriteLine(p[<span class="number">1</span>]);</span><br><span class="line">            Console.WriteLine(p[<span class="number">2</span>]);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> x, y, z;</span><br><span class="line">        <span class="comment">//定义索引器，使得可以使用数组的方式访问Vector的数据</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> <span class="keyword">this</span>[<span class="built_in">int</span> i]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span> (i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> x;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> y;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> z;</span><br><span class="line">                    <span class="comment">//若访问下标超出范围，抛出异常</span></span><br><span class="line">                    <span class="literal">default</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfRangeException(<span class="string">&quot;下标超出范围&quot;</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span>(i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        x = <span class="keyword">value</span>;<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        y = <span class="keyword">value</span>;<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        z = <span class="keyword">value</span>;<span class="keyword">break</span>;</span><br><span class="line">                    <span class="literal">default</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfRangeException(<span class="string">&quot;下标超出范围&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="索引器的应用二"><a href="#索引器的应用二" class="headerlink" title="索引器的应用二"></a>索引器的应用二</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_6</span>索引器的应用二</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建一个容量为3的相册</span></span><br><span class="line">            Framework friends = <span class="keyword">new</span> Framework(<span class="number">3</span>);</span><br><span class="line">            <span class="comment">//创建3张照片</span></span><br><span class="line">            Picture first = <span class="keyword">new</span> Picture(<span class="string">&quot;幼年照片&quot;</span>);</span><br><span class="line">            Picture second = <span class="keyword">new</span> Picture(<span class="string">&quot;成年照片&quot;</span>);</span><br><span class="line">            Picture third = <span class="keyword">new</span> Picture(<span class="string">&quot;老年照片&quot;</span>);</span><br><span class="line">            <span class="comment">//向相册加载照片</span></span><br><span class="line">            friends[<span class="number">0</span>] = first;</span><br><span class="line">            friends[<span class="number">1</span>] = second;</span><br><span class="line">            friends[<span class="number">2</span>] = third;</span><br><span class="line">            <span class="comment">//按索引检索</span></span><br><span class="line">            Picture p1 = friends[<span class="number">2</span>];</span><br><span class="line">            Console.WriteLine(p1.Title);</span><br><span class="line">            <span class="comment">//按名称索引</span></span><br><span class="line">            Picture p2 = friends[<span class="string">&quot;幼年照片&quot;</span>];</span><br><span class="line">            Console.WriteLine(p2.Title);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Picture</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> _title;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Picture</span>(<span class="params"><span class="built_in">string</span> title</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>._title = title;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span>  Title</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> _title;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Framework</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//该数组用于存放照片</span></span><br><span class="line">        Picture[] pictures;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Framework</span>(<span class="params"><span class="built_in">int</span> capacity</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            pictures = <span class="keyword">new</span> Picture[capacity];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用整型的序号作为下标的索引器</span></span><br><span class="line">        <span class="keyword">public</span> Picture <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//验证索引范围</span></span><br><span class="line">                <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;=pictures.Length)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;索引无效&quot;</span>);</span><br><span class="line">                    <span class="comment">//使用null指示失败</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> pictures[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;=pictures.Length)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;索引无效&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pictures[index] = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Picture <span class="keyword">this</span>[<span class="built_in">string</span> title]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//遍历数组中的所有照片</span></span><br><span class="line">                <span class="keyword">foreach</span>(Picture p <span class="keyword">in</span> pictures)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//将图片中的标题与索引器参数进行比较</span></span><br><span class="line">                    <span class="keyword">if</span> (p.Title == title)</span><br><span class="line">                        <span class="keyword">return</span> p;</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;未找到&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//使用null指示失败</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果如下:<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206101953584.png"><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2></li><li>异常：是指程序允许时发生的错误。</li><li>报告错误(异常):允许时的错误要及时地通知给程序进行必要的处理</li><li>异常对象与抛出异常:CLR将自动收集运行时的错误信息，封装成对象(异常对象)来报告错误。这种报告错误的方法称为抛出异常。</li><li>异常处理:C#用try…catch语句来捕捉系统抛出的异常对象，根据错误的内容进行相应的处理。<br>两种系统的异常</li><li>系统异常<ul><li>对常见的错误定义了相应的异常类;</li><li>发生运行时错误，由CLR将自动收集运行时的错误信息，封装成对象(异常对象)来报告错误。</li></ul></li><li>应用程序异常<ul><li>根据需要定义异常类(从ApplicationException继承);</li><li>程序员根据需要在应用程序的代码中，创建异常对象并抛出System.Exception类;<br>在C#中，异常用类来表示，所有异常类都必须从内部异常类Exception派生而来，而Exception是System名字空间的一部分。因此所有异常都是Exception的子类。</li><li>异常筛选器中指定的异常类型与异常对象的类型相同;</li></ul></li></ul>]]></content>
    
    
    <summary type="html">C#和Matlab混合编程</summary>
    
    
    
    <category term="C#面向对象的学习" scheme="https://yjxdl.github.io/categories/C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C#" scheme="https://yjxdl.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# WinForm窗体自适应各种屏幕的分辨率</title>
    <link href="https://yjxdl.github.io/2022/05/03/CAPP/CSharp%20WinForm%E7%AA%97%E4%BD%93%E9%80%82%E5%BA%94%E5%90%84%E7%A7%8D%E5%B1%8F%E5%B9%95%E5%88%86%E8%BE%A8%E7%8E%87/"/>
    <id>https://yjxdl.github.io/2022/05/03/CAPP/CSharp%20WinForm%E7%AA%97%E4%BD%93%E9%80%82%E5%BA%94%E5%90%84%E7%A7%8D%E5%B1%8F%E5%B9%95%E5%88%86%E8%BE%A8%E7%8E%87/</id>
    <published>2022-05-03T01:23:00.000Z</published>
    <updated>2022-09-30T02:28:04.511Z</updated>
    
    <content type="html"><![CDATA[<style>h2{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}h4{background-image: linear-gradient(to right, #eea2a2 0%, #bbc1bf 19%, #57c6e1 42%, #b49fda 79%, #7ac5d8 100%);}</style><h2 id="C-WinForm窗体自适应各种屏幕的分辨率"><a href="#C-WinForm窗体自适应各种屏幕的分辨率" class="headerlink" title="C# WinForm窗体自适应各种屏幕的分辨率"></a>C# WinForm窗体自适应各种屏幕的分辨率</h2><h3 id="控件大小随着窗体大小等比例的缩放"><a href="#控件大小随着窗体大小等比例的缩放" class="headerlink" title="控件大小随着窗体大小等比例的缩放"></a>控件大小随着窗体大小等比例的缩放</h3><ul><li>得到当前窗体的宽度和高度 <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义两个变量记录当前窗体的宽度和高度</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> x; <span class="comment">//当前窗体的宽度</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> y; <span class="comment">//当前窗体的高度</span></span><br></pre></td></tr></table></figure>x,y值为：<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">x = panel1.Width;</span><br><span class="line">y = panel1.Height;</span><br></pre></td></tr></table></figure></li><li><strong>得到需要扩大的倍数，在Form_Resize下设置</strong><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Resize</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> newx = (<span class="keyword">this</span>.Width) / x; <span class="comment">//宽度需要扩大的倍数</span></span><br><span class="line">    <span class="built_in">float</span> newy = (<span class="keyword">this</span>.Height) / y; <span class="comment">//高度需要扩大的倍数</span></span><br><span class="line">    setControls(newx, newy, <span class="keyword">this</span>);  <span class="comment">//对设置窗体的控件大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>设置窗体控件的大小</strong><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setControls</span>(<span class="params"><span class="built_in">float</span> newx,<span class="built_in">float</span> newy,Control cons</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(Control con <span class="keyword">in</span> cons.Controls)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(con.Tag !=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span>[] mytag = con.Tag.ToString().Split(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">            <span class="comment">//根据窗体缩放的比例确定控件的值</span></span><br><span class="line">            con.Width = Convert.ToInt32(System.Convert.ToSingle(mytag[<span class="number">0</span>]) * newx);<span class="comment">//宽度</span></span><br><span class="line">            con.Height = Convert.ToInt32(System.Convert.ToSingle(mytag[<span class="number">1</span>]) * newy);<span class="comment">//高度</span></span><br><span class="line">            con.Left = Convert.ToInt32(System.Convert.ToSingle(mytag[<span class="number">2</span>]) * newx);<span class="comment">//左边距</span></span><br><span class="line">            con.Top = Convert.ToInt32(System.Convert.ToSingle(mytag[<span class="number">3</span>]) * newy);<span class="comment">//顶边距</span></span><br><span class="line">            Single currentSize = System.Convert.ToSingle(mytag[<span class="number">4</span>]) * newy;<span class="comment">//字体大小</span></span><br><span class="line">            con.Font = <span class="keyword">new</span> Font(con.Font.Name, currentSize, con.Font.Style, con.Font.Unit);</span><br><span class="line">            <span class="keyword">if</span> (con.Controls.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                setControls(newx, newy, con);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历控件得到每个窗体的宽度、高度、左边上边和窗体的大小"><a href="#遍历控件得到每个窗体的宽度、高度、左边上边和窗体的大小" class="headerlink" title="遍历控件得到每个窗体的宽度、高度、左边上边和窗体的大小"></a>遍历控件得到每个窗体的宽度、高度、左边上边和窗体的大小</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTag</span>(<span class="params">Control cons</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(Control con <span class="keyword">in</span> cons.Controls)</span><br><span class="line">    &#123;</span><br><span class="line">        con.Tag = con.Width + <span class="string">&quot;;&quot;</span> + con.Height + <span class="string">&quot;;&quot;</span> + con.Left + <span class="string">&quot;;&quot;</span> + con.Top + <span class="string">&quot;;&quot;</span> + con.Font.Size;</span><br><span class="line">        <span class="keyword">if</span>(con.Controls.Count&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            setTag(con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置改变大小"><a href="#设置改变大小" class="headerlink" title="设置改变大小"></a>设置改变大小</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeSize</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetStyle(ControlStyles.UserPaint, <span class="literal">true</span>);</span><br><span class="line">    SetStyle(ControlStyles.AllPaintingInWmPaint, <span class="literal">true</span>);</span><br><span class="line">    SetStyle(ControlStyles.OptimizedDoubleBuffer, <span class="literal">true</span>);</span><br><span class="line">    x = <span class="keyword">this</span>.Width; </span><br><span class="line">    y = <span class="keyword">this</span>.Height;</span><br><span class="line">    setTag(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//this.WindowState = FormWindowState.Maximized;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3></li></ul><p><strong>这是一个私有仓库，只允许本人访问</strong><br><a href="https://github.com/YJXDL/CSharp-AutoSize">代码地址</a></p>]]></content>
    
    
    <summary type="html">C# WinForm窗体自适应各种屏幕的分辨率</summary>
    
    
    
    <category term="C#" scheme="https://yjxdl.github.io/categories/C/"/>
    
    
    <category term="C#" scheme="https://yjxdl.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#学习笔记</title>
    <link href="https://yjxdl.github.io/2022/04/29/CAPP/CSharpLearning/"/>
    <id>https://yjxdl.github.io/2022/04/29/CAPP/CSharpLearning/</id>
    <published>2022-04-29T04:38:18.000Z</published>
    <updated>2022-09-30T02:28:04.492Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    <category term="C#学习" scheme="https://yjxdl.github.io/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C#" scheme="https://yjxdl.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#和Matlab混合编程</title>
    <link href="https://yjxdl.github.io/2022/04/27/CAPP/CSharp%E5%92%8CMatlab%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/"/>
    <id>https://yjxdl.github.io/2022/04/27/CAPP/CSharp%E5%92%8CMatlab%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/</id>
    <published>2022-04-27T04:41:40.000Z</published>
    <updated>2022-09-30T02:28:04.496Z</updated>
    
    <content type="html"><![CDATA[<style>h2{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{    background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}</style><h2 id="C-与Matlab混合编程"><a href="#C-与Matlab混合编程" class="headerlink" title="C#与Matlab混合编程"></a>C#与Matlab混合编程</h2><h3 id="在Matlab中编写函数"><a href="#在Matlab中编写函数" class="headerlink" title="在Matlab中编写函数"></a>在Matlab中编写函数</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">result</span> = <span class="title">addNum</span><span class="params">(a,b)</span></span></span><br><span class="line">    result = a + b;</span><br><span class="line"></span><br><span class="line">    x = <span class="number">-5</span>:<span class="number">0.1</span>:<span class="number">5</span>;</span><br><span class="line">    y = <span class="built_in">sin</span>(x);</span><br><span class="line">    <span class="built_in">plot</span>(x,y)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对函数进行封装"><a href="#对函数进行封装" class="headerlink" title="对函数进行封装"></a>对函数进行封装</h3><p><strong>在命令行窗口中输入deploytool调出封装工具箱,选择Library Compiler.</strong><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/20220427090420.png" alt="Library Compiler"></p><ol><li><strong>在TYPE下选择 .NET Assembly</strong><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/20220427091433.png"></li><li><strong>在EXPORTED FUNCTIONS 点击右边+号，点击你写的程序点击打开</strong><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/20220427091321.png"></li><li><strong>打包程序</strong></li></ol><ul><li>此时PACKAGE 变为绿色的小勾<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/20220427091552.png"></li><li>点击绿色的小勾，然后选择对应的路径存放你写的程序就OK。<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/20220427091736.png" alt="处理过程"></li><li>创建成功会出现以下文件夹<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/20220427092014.png"><h3 id="对C-的环境进行选择"><a href="#对C-的环境进行选择" class="headerlink" title="对C#的环境进行选择"></a>对C#的环境进行选择</h3></li><li><strong>这一步很重要，不然肯定会报错</strong></li><li><strong>右键解决方案，点击属性</strong></li><li><strong>在属性中点击生成，目标平台选择x64即可</strong><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/20220428153246.png"><h3 id="编写C-函数对Matlab进行调用"><a href="#编写C-函数对Matlab进行调用" class="headerlink" title="编写C#函数对Matlab进行调用"></a>编写C#函数对Matlab进行调用</h3></li><li><strong>先创建好一个Winform界面，把button按钮拖到界面上，我们在Button的click事件下，测试我们的程序</strong>。</li><li><strong>右键引用-&gt;添加引用</strong><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/20220427092849.png"><ul><li>添加刚刚生成的dll 在刚刚的路径下for_testing文件夹下选择addNum.dll,点击添加。<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/20220427093323.png"></li><li>添加MWArray.dll 在你安装MATLAB的路径下找到toolbox-&gt;donetbuilder-&gt;bin-&gt;win64-&gt;v4.0<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/20220427093710.png"></li></ul></li><li><strong>写程序</strong><br>在程序中添加引用<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/20220427093903.png"><ul><li>在Click事件下写代码<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Class1 demo = <span class="keyword">new</span> Class1();</span><br><span class="line">    MWArray a = <span class="number">1</span>, b = <span class="number">2</span>, c;</span><br><span class="line">    c = demo.addNum(a, b);            </span><br><span class="line">    button1.Text = c.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>运行结果</strong><ul><li>点击Button会出现：Button的Text变为我们加和的值，然后图片也显示出来了<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/20220427094200.png"></li></ul></li><li><strong>运行出错的解决方法</strong><br>运行结束时出现”无法加载 DLL “mclmcrrt9_4.dll”:找不到指定模块。<br><strong>解决办法：</strong> 安装matlab版本的MCR(Matlab compiler runtime),重启VS即可。<br><a href="https://ww2.mathworks.cn/products/compiler/matlab-runtime.html">MCR下载地址</a></li></ul>]]></content>
    
    
    <summary type="html">C#和Matlab混合编程</summary>
    
    
    
    <category term="混合编程" scheme="https://yjxdl.github.io/categories/%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C#" scheme="https://yjxdl.github.io/tags/C/"/>
    
    <category term="Matlab" scheme="https://yjxdl.github.io/tags/Matlab/"/>
    
  </entry>
  
</feed>
