<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YJXDL的博客</title>
  
  <subtitle>生若直木,不语斧凿</subtitle>
  <link href="https://yjxdl.github.io/atom.xml" rel="self"/>
  
  <link href="https://yjxdl.github.io/"/>
  <updated>2024-12-06T00:34:38.021Z</updated>
  <id>https://yjxdl.github.io/</id>
  
  <author>
    <name>闫晶鑫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BIO、NIO、AIO学习</title>
    <link href="https://yjxdl.github.io/2024/12/05/SelfLearning/BIO-NIO-AIO%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yjxdl.github.io/2024/12/05/SelfLearning/BIO-NIO-AIO%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-12-05T07:55:12.000Z</published>
    <updated>2024-12-06T00:34:38.021Z</updated>
    
    <content type="html"><![CDATA[<style>h2{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h4{background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}h3{background-image: linear-gradient(to right, #d0e6be 0%, #e1e1e1 20%);color: #000;}</style><h2 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h2><p>Java共支持三种网络编程模型：BIO,NIO,AIO</p><h3 id="BIO-Blocking-IO"><a href="#BIO-Blocking-IO" class="headerlink" title="BIO(Blocking IO)"></a>BIO(Blocking IO)</h3><p>同步阻塞模型，一个客户端连接对应一个处理线程</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><h2 id="安装并激活office"><a href="#安装并激活office" class="headerlink" title="安装并激活office"></a>安装并激活office</h2><h3 id="1、以管理员身份运行安装包，选择对应的版本"><a href="#1、以管理员身份运行安装包，选择对应的版本" class="headerlink" title="1、以管理员身份运行安装包，选择对应的版本"></a>1、以管理员身份运行安装包，选择对应的版本</h3><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20241206083410.png"></p><h3 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
h2{
    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);
color: #000;
}
h4{
background: linear-gradient(to top, #e6e</summary>
      
    
    
    
    
    <category term="异步非阻塞学习" scheme="https://yjxdl.github.io/tags/%E5%BC%82%E6%AD%A5%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Java" scheme="https://yjxdl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用SpringBoot给泛微发送消息</title>
    <link href="https://yjxdl.github.io/2024/12/05/CAPP/%E4%BD%BF%E7%94%A8SpringBoot%E7%BB%99%E6%B3%9B%E5%BE%AE%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/"/>
    <id>https://yjxdl.github.io/2024/12/05/CAPP/%E4%BD%BF%E7%94%A8SpringBoot%E7%BB%99%E6%B3%9B%E5%BE%AE%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</id>
    <published>2024-12-05T03:38:18.000Z</published>
    <updated>2024-12-05T07:46:39.627Z</updated>
    
    <content type="html"><![CDATA[<style>h2{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}h4{background-image: linear-gradient(to right, #eea2a2 0%, #bbc1bf 19%, #57c6e1 42%, #b49fda 79%, #7ac5d8 100%);}</style><h2 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h2><h3 id="注释这行代码"><a href="#注释这行代码" class="headerlink" title="注释这行代码"></a>注释这行代码</h3><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20241205154139.png"></p><h3 id="修改为531"><a href="#修改为531" class="headerlink" title="修改为531"></a>修改为531</h3><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20241205154253.png"></p><h3 id="PCode代表人员的工号，message为所发送的消息"><a href="#PCode代表人员的工号，message为所发送的消息" class="headerlink" title="PCode代表人员的工号，message为所发送的消息"></a>PCode代表人员的工号，message为所发送的消息</h3><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20241205154402.png"></p><h3 id="Git仓库地址：https-github-com-YJXDL-NhgDecs-git"><a href="#Git仓库地址：https-github-com-YJXDL-NhgDecs-git" class="headerlink" title="Git仓库地址：https://github.com/YJXDL/NhgDecs.git"></a>Git仓库地址：<a href="https://github.com/YJXDL/NhgDecs.git">https://github.com/YJXDL/NhgDecs.git</a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
h2{
    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);
color: #000;
}
h3{
background: linear-gradient(to top, #e6e</summary>
      
    
    
    
    <category term="Java" scheme="https://yjxdl.github.io/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://yjxdl.github.io/tags/SpringBoot/"/>
    
    <category term="泛微" scheme="https://yjxdl.github.io/tags/%E6%B3%9B%E5%BE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境下使用sqlplus访问远程Oracle数据库</title>
    <link href="https://yjxdl.github.io/2024/09/26/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8sqlplus%E8%AE%BF%E9%97%AE%E8%BF%9C%E7%A8%8BOracle%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://yjxdl.github.io/2024/09/26/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8sqlplus%E8%AE%BF%E9%97%AE%E8%BF%9C%E7%A8%8BOracle%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2024-09-26T03:58:52.000Z</published>
    <updated>2024-10-16T06:40:29.449Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一步：下载和安装工具"><a href="#第一步：下载和安装工具" class="headerlink" title="第一步：下载和安装工具"></a>第一步：下载和安装工具</h3><p>首先下载 Oracle 客户端和 sqlplus 链接工具（我使用 CentOS 7，其他版本系统需要在官方找一下对应版本）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://yum.oracle.com/repo/OracleLinux/OL7/oracle/instantclient21/x86_64/getPackage/oracle-instantclient-basic-21.1.0.0.0-1.x86_64.rpm</span><br><span class="line">wget https://yum.oracle.com/repo/OracleLinux/OL7/oracle/instantclient21/x86_64/getPackage/oracle-instantclient-sqlplus-21.1.0.0.0-1.x86_64.rpm</span><br></pre></td></tr></table></figure><p>然后安装 rpm 包，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh oracle-instantclient-basic-21.1.0.0.0-1.x86_64.rpm</span><br><span class="line">rpm -ivh oracle-instantclient-sqlplus-21.1.0.0.0-1.x86_64.rpm</span><br></pre></td></tr></table></figure><p>安装后通常客户端会在如下目录：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/lib/oracle/21/client64</span><br><span class="line">如果不确定的话，可以使用 whereis oracle 搜索一下看看，接下来开始配置</span><br></pre></td></tr></table></figure><h3 id="第二步：配置环境和-network-admin-文件"><a href="#第二步：配置环境和-network-admin-文件" class="headerlink" title="第二步：配置环境和 /network/admin 文件"></a>第二步：配置环境和 /network/admin 文件</h3><p>打开当前环境变量配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>首先把 oracle/client 程序加入 Linux 系统环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export ORACLE_HOME=/usr/lib/oracle/21/client64</span><br><span class="line">export LD_LIBRARY_PATH=$ORACLE_HOME/lib</span><br><span class="line">export TNS_ADMIN=$ORACLE_HOME/network/admin</span><br></pre></td></tr></table></figure><p>ORACLE_HOME 根据你自己的系统路径调整，最后可以刷新一下文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/lib/oracle/21/client64</span><br><span class="line">vim network/admin/tnsnames.ora</span><br></pre></td></tr></table></figure><p><strong>注意</strong> network/admin/tnsnames.ora没有当前目录以及文件需要先创建路径，然后使用vim tnsnames.ora插入对应内容<br>文件格式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># tnsnames.ora Network Configuration File: F:\oracle\product\11.2.0\dbhome_1\NETWORK\ADMIN\tnsnames.ora</span><br><span class="line"># Generated by Oracle configuration tools.</span><br><span class="line"></span><br><span class="line">TOPPROD =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS_LIST =</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.21)(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVICE_NAME = topprod)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">TOPTEST =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS_LIST =</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.21)(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVICE_NAME = toptest)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第三步：连接和访问"><a href="#第三步：连接和访问" class="headerlink" title="第三步：连接和访问"></a>第三步：连接和访问</h3><p>配好环境变量就可以使用 sqlplus 命令，格式是： sqlplus user/pass@tnsnames的实例名，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlplus nhgdb/nhgdb@192.168.1.21:1521/TOPPROD</span><br></pre></td></tr></table></figure><p>看到以上命令就代表成功了，然后就可以执行 SQL 查看数据了：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240926143131.png"></p><h3 id="sqlplus-中文乱码问题"><a href="#sqlplus-中文乱码问题" class="headerlink" title="sqlplus 中文乱码问题"></a>sqlplus 中文乱码问题</h3><p>最后如果遇到 sqlplus 中文乱码问题，可以修改当前 /etc/profile 在系统上加入对字符编码： “SIMPLIFIED CHINESE_CHINA.AL32UTF8” 的支持即可，具体如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">export NLS_LANG=&quot;SIMPLIFIED CHINESE_CHINA.AL32UTF8&quot;</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="Linux运行jar程序"><a href="#Linux运行jar程序" class="headerlink" title="Linux运行jar程序"></a>Linux运行jar程序</h2><h3 id="在后端运行JAR文件在后台运行"><a href="#在后端运行JAR文件在后台运行" class="headerlink" title="在后端运行JAR文件在后台运行"></a>在后端运行JAR文件在后台运行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup java -jar 文件名称.jar &gt; output.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux | grep 文件名称.jar</span><br></pre></td></tr></table></figure><p>要停止进程，可以使用 kill 命令，配合进程ID（PID)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第一步：下载和安装工具&quot;&gt;&lt;a href=&quot;#第一步：下载和安装工具&quot; class=&quot;headerlink&quot; title=&quot;第一步：下载和安装工具&quot;&gt;&lt;/a&gt;第一步：下载和安装工具&lt;/h3&gt;&lt;p&gt;首先下载 Oracle 客户端和 sqlplus 链接工具（我使用 </summary>
      
    
    
    
    
    <category term="Oracle" scheme="https://yjxdl.github.io/tags/Oracle/"/>
    
    <category term="Linux" scheme="https://yjxdl.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Mqtt协议</title>
    <link href="https://yjxdl.github.io/2024/09/20/Mqtt%E5%8D%8F%E8%AE%AE/"/>
    <id>https://yjxdl.github.io/2024/09/20/Mqtt%E5%8D%8F%E8%AE%AE/</id>
    <published>2024-09-20T00:51:02.000Z</published>
    <updated>2024-09-20T03:08:14.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现生产者，发送消息"><a href="#实现生产者，发送消息" class="headerlink" title="实现生产者，发送消息"></a>实现生产者，发送消息</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.integration&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-integration-mqtt&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">5.3</span><span class="number">.2</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>修改application.yml,增加MQTT相关的配置，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: provider</span><br><span class="line">    #MQTT配置信息</span><br><span class="line">  mqtt:</span><br><span class="line">    #MQTT服务地址，端口号默认1883，如果有多个，用逗号隔开</span><br><span class="line">    url: tcp://127.0.0.1:1883</span><br><span class="line">    #用户名</span><br><span class="line">    username: admin</span><br><span class="line">    #密码</span><br><span class="line">    password: public</span><br><span class="line">    #客户端id(不能重复)</span><br><span class="line">    client:</span><br><span class="line">      id: provider-id</span><br><span class="line">    #MQTT默认的消息推送主题，实际可在调用接口是指定</span><br><span class="line">    default:</span><br><span class="line">      topic: topic</span><br><span class="line">server:</span><br><span class="line">  port: 8080</span><br></pre></td></tr></table></figure><h3 id="Springboot让非web项目保持运行"><a href="#Springboot让非web项目保持运行" class="headerlink" title="Springboot让非web项目保持运行"></a>Springboot让非web项目保持运行</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实现生产者，发送消息&quot;&gt;&lt;a href=&quot;#实现生产者，发送消息&quot; class=&quot;headerlink&quot; title=&quot;实现生产者，发送消息&quot;&gt;&lt;/a&gt;实现生产者，发送消息&lt;/h2&gt;&lt;h3 id=&quot;导入依赖&quot;&gt;&lt;a href=&quot;#导入依赖&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="Mqtt" scheme="https://yjxdl.github.io/tags/Mqtt/"/>
    
    <category term="Springboot" scheme="https://yjxdl.github.io/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Mosquitto的安装和使用</title>
    <link href="https://yjxdl.github.io/2024/09/20/Mosquitto%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://yjxdl.github.io/2024/09/20/Mosquitto%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2024-09-20T00:39:40.000Z</published>
    <updated>2024-09-20T00:43:47.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件安装包"><a href="#软件安装包" class="headerlink" title="软件安装包"></a>软件安装包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过网盘分享的文件：Mqtt服务器安装</span><br><span class="line">链接: https://pan.baidu.com/s/1x_6tpNLICxrOefp0x-qKIg 提取码: txf2</span><br></pre></td></tr></table></figure><h2 id="Windows版本安装"><a href="#Windows版本安装" class="headerlink" title="Windows版本安装"></a>Windows版本安装</h2><h3 id="根据电脑版本选择对应安装包"><a href="#根据电脑版本选择对应安装包" class="headerlink" title="根据电脑版本选择对应安装包"></a>根据电脑版本选择对应安装包</h3><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240919174105.png"></p><h3 id="傻瓜式安装（略）"><a href="#傻瓜式安装（略）" class="headerlink" title="傻瓜式安装（略）"></a>傻瓜式安装（略）</h3><p>软件安装默认位置 C:\Program Files\mosquitto</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><h4 id="配置文件的位置为安装mosquitto的位置，使用记事本打开该文件，"><a href="#配置文件的位置为安装mosquitto的位置，使用记事本打开该文件，" class="headerlink" title="配置文件的位置为安装mosquitto的位置，使用记事本打开该文件，"></a>配置文件的位置为安装mosquitto的位置，使用记事本打开该文件，</h4><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240919174837.png"></p><h4 id="在文件的最后加入"><a href="#在文件的最后加入" class="headerlink" title="在文件的最后加入"></a>在文件的最后加入</h4><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240919174958.png"></p><h3 id="重启Mosquitto-Broker服务"><a href="#重启Mosquitto-Broker服务" class="headerlink" title="重启Mosquitto Broker服务"></a>重启Mosquitto Broker服务</h3><p>Mosquitto Broker服务是一个MQTT代理服务器，用户处理消息传递。</p><h4 id="Win-R-输入-services-msc-打开服务-重启Mosquitto-Broker-，可以设置为自启动"><a href="#Win-R-输入-services-msc-打开服务-重启Mosquitto-Broker-，可以设置为自启动" class="headerlink" title="Win+R 输入 services.msc 打开服务, 重启Mosquitto Broker ，可以设置为自启动"></a>Win+R 输入 services.msc 打开服务, 重启Mosquitto Broker ，可以设置为自启动</h4><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240919175714.png"></p><h4 id="使用命令行工具发布消息"><a href="#使用命令行工具发布消息" class="headerlink" title="使用命令行工具发布消息"></a>使用命令行工具发布消息</h4><p>输入CMD，输入以下来发布消息</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mosquitto_pub -h localhost -t topic -m &quot;Hello, MQTT&quot;</span><br></pre></td></tr></table></figure><h2 id="Linux版本的安装"><a href="#Linux版本的安装" class="headerlink" title="Linux版本的安装"></a>Linux版本的安装</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;软件安装包&quot;&gt;&lt;a href=&quot;#软件安装包&quot; class=&quot;headerlink&quot; title=&quot;软件安装包&quot;&gt;&lt;/a&gt;软件安装包&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;cod</summary>
      
    
    
    
    <category term="Mqtt" scheme="https://yjxdl.github.io/categories/Mqtt/"/>
    
    
    <category term="Mqtt" scheme="https://yjxdl.github.io/tags/Mqtt/"/>
    
  </entry>
  
  <entry>
    <title>大屏展示</title>
    <link href="https://yjxdl.github.io/2024/09/14/%E5%A4%A7%E5%B1%8F%E5%B1%95%E7%A4%BA/"/>
    <id>https://yjxdl.github.io/2024/09/14/%E5%A4%A7%E5%B1%8F%E5%B1%95%E7%A4%BA/</id>
    <published>2024-09-14T03:37:01.000Z</published>
    <updated>2024-10-14T03:10:25.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DataEase"><a href="#DataEase" class="headerlink" title="DataEase"></a>DataEase</h2><p>采用开源的DataEase作为数据可视化工具，能够通过简单的拖拉拽快速制作表格</p><h3 id="DataEase的安装"><a href="#DataEase的安装" class="headerlink" title="DataEase的安装"></a>DataEase的安装</h3><p>Mysql Linux环境下安装<a href="https://www.cnblogs.com/whjblog/p/17192502.html">https://www.cnblogs.com/whjblog/p/17192502.html</a></p><h3 id="DataEase的备份和迁移"><a href="#DataEase的备份和迁移" class="headerlink" title="DataEase的备份和迁移"></a>DataEase的备份和迁移</h3><h4 id="备份数据来源"><a href="#备份数据来源" class="headerlink" title="备份数据来源"></a>备份数据来源</h4><p>备份数据来自于 /opt/dataease2.0 ,该文件夹存放了DataEase运行时的配置文件以及运行时所产生的数据，包括日志文件等。</p><h4 id="打包该文件夹"><a href="#打包该文件夹" class="headerlink" title="打包该文件夹"></a>打包该文件夹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -czvf dataease2.0.tar.gz /opt/dataease2.0</span><br></pre></td></tr></table></figure><h4 id="将该文件夹移动到指定位置"><a href="#将该文件夹移动到指定位置" class="headerlink" title="将该文件夹移动到指定位置"></a>将该文件夹移动到指定位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv dataease2.0.tar.gz /opt/dataease2.0</span><br></pre></td></tr></table></figure><h4 id="强制删除某个文件夹"><a href="#强制删除某个文件夹" class="headerlink" title="强制删除某个文件夹"></a>强制删除某个文件夹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-r 表示递归删除文件夹及其所有内容（包括子文件和子文件夹）。</span><br><span class="line">如果您想强制删除（即使文件或文件夹有写保护），可以使用 -f 选项：</span><br><span class="line">rm -rf 文件夹路径</span><br></pre></td></tr></table></figure><h3 id="DataEase服务的启动"><a href="#DataEase服务的启动" class="headerlink" title="DataEase服务的启动"></a>DataEase服务的启动</h3><h4 id="输入dectl查看可以使用的命令"><a href="#输入dectl查看可以使用的命令" class="headerlink" title="输入dectl查看可以使用的命令"></a>输入dectl查看可以使用的命令</h4><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240919083022.png"></p><h4 id="启动DataEase"><a href="#启动DataEase" class="headerlink" title="启动DataEase"></a>启动DataEase</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dectl start</span><br></pre></td></tr></table></figure><h4 id="关闭DataEase"><a href="#关闭DataEase" class="headerlink" title="关闭DataEase"></a>关闭DataEase</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dectl stop</span><br></pre></td></tr></table></figure><h2 id="DataEase升级"><a href="#DataEase升级" class="headerlink" title="DataEase升级"></a>DataEase升级</h2><h3 id="升级之前先备份"><a href="#升级之前先备份" class="headerlink" title="升级之前先备份"></a>升级之前先备份</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dectl backup</span><br></pre></td></tr></table></figure><p>备份结束后会有个文件<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20241014110150.png"><br>下载需要升级的文件夹，然后关闭dataease(dectl stop)</p><h3 id="按照更新版本"><a href="#按照更新版本" class="headerlink" title="按照更新版本"></a>按照更新版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar zxvf 版本号 //解压版本</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd dataease-offline-installer-v2.10.1-ce/</span><br><span class="line">/bin/bash install.sh</span><br></pre></td></tr></table></figure><style>h2{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{    background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DataEase&quot;&gt;&lt;a href=&quot;#DataEase&quot; class=&quot;headerlink&quot; title=&quot;DataEase&quot;&gt;&lt;/a&gt;DataEase&lt;/h2&gt;&lt;p&gt;采用开源的DataEase作为数据可视化工具，能够通过简单的拖拉拽快速制作表格&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
    <category term="大屏展示，mysql" scheme="https://yjxdl.github.io/tags/%E5%A4%A7%E5%B1%8F%E5%B1%95%E7%A4%BA%EF%BC%8Cmysql/"/>
    
  </entry>
  
  <entry>
    <title>ElementUI</title>
    <link href="https://yjxdl.github.io/2024/09/10/ElementUI/"/>
    <id>https://yjxdl.github.io/2024/09/10/ElementUI/</id>
    <published>2024-09-09T23:58:59.000Z</published>
    <updated>2024-09-10T07:09:24.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Element-UI简介"><a href="#Element-UI简介" class="headerlink" title="Element UI简介"></a>Element UI简介</h2><p>基于vue的一套桌面端组件，提前封装好的UI模板。方便开发者快速搭建一个网站前端界面。<br>官网：<a href="https://element.eleme.cn/">https://element.eleme.cn/</a></p><h2 id="Element-UI安装"><a href="#Element-UI安装" class="headerlink" title="Element UI安装"></a>Element UI安装</h2><h3 id="首先创建Vue项目"><a href="#首先创建Vue项目" class="headerlink" title="首先创建Vue项目"></a>首先创建Vue项目</h3><ul><li>确保电脑安装Vue环境</li><li>执行命令 vue ui 打开浏览器打开Vue管理界面</li><li>打开小房子按钮<img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910080849.png"></li><li>选择创建 <img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910080939.png"></li><li>设置项目存放路径 <img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910081206.png"></li><li>点击在此创建项目</li><li>输入项目名称，点击下一步<img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910081418.png" height=600></li><li>选择手动配置项目，点击下一步<img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910081655.png"></li><li>进行功能配置，点击下一步<img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910081938.png"></li><li>打开hostory mode,点击创建项目 <img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910082130.png"></li><li>点击创建项目不保存预设</li><li>等待项目创建结束</li><li>出现该图片代表项目安装成功<img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910082653.png"><h3 id="给项目安装ElementUI插件"><a href="#给项目安装ElementUI插件" class="headerlink" title="给项目安装ElementUI插件"></a>给项目安装ElementUI插件</h3></li><li>点击插件<img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910082832.png"></li><li>点击添加插件 <img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910082922.png"></li><li>搜索框输入element,选中第一项<img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910083025.png"></li><li>点击完成安装</li><li>点击继续就会发现ElementUI插件已经安装在项目中，界面如下所示<img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910083355.png"><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3></li><li>打开项目，使用Ideal打开<img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910083638.png"></li><li>打开之后可以看见Plugin中有elelement说明element已经成功安装在Vue项目中<img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910083845.png"></li><li>终端执行命名 npm run serve</li><li>若安装成功出现以下界面 <img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910084218.png" width=600><h2 id="ElementUI组件的使用"><a href="#ElementUI组件的使用" class="headerlink" title="ElementUI组件的使用"></a>ElementUI组件的使用</h2><h3 id="Icon图标"><a href="#Icon图标" class="headerlink" title="Icon图标"></a>Icon图标</h3>提供了一套常用的图标集合，直接使用i标签结合class来使用：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;i class=&quot;el-icon-edit&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>直接通过设置类名为 el-icon-iconName 来使用即可。<br>图标示例 <img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910085025.png" width=600><h3 id="在项目中尝试"><a href="#在项目中尝试" class="headerlink" title="在项目中尝试"></a>在项目中尝试</h3></li><li>新建vue组件<img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910085956.png"></li><li>配置路由 <img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910143031.png"></li><li>在App.vue中配置<img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20240910145445.png"><h2 id="Button按钮"><a href="#Button按钮" class="headerlink" title="Button按钮"></a>Button按钮</h2></li><li>是 Element Ul提供的一组常用的操作按钮组件，直接使用封装好的 el-button,比如:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-button type=&quot;info&quot; round&gt;信息按钮&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>基于el-button，可以使用 type、plain、round、circle</li><li><style>h2{  background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{  background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}</style></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Element-UI简介&quot;&gt;&lt;a href=&quot;#Element-UI简介&quot; class=&quot;headerlink&quot; title=&quot;Element UI简介&quot;&gt;&lt;/a&gt;Element UI简介&lt;/h2&gt;&lt;p&gt;基于vue的一套桌面端组件，提前封装好的UI模板。方便开发者</summary>
      
    
    
    
    <category term="ElementUI+SpringBoot教程" scheme="https://yjxdl.github.io/categories/ElementUI-SpringBoot%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="ElementUI" scheme="https://yjxdl.github.io/tags/ElementUI/"/>
    
    <category term="SpringBoot" scheme="https://yjxdl.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Matlab分析.md</title>
    <link href="https://yjxdl.github.io/2024/09/09/Matlab%E5%88%86%E6%9E%90/"/>
    <id>https://yjxdl.github.io/2024/09/09/Matlab%E5%88%86%E6%9E%90/</id>
    <published>2024-09-09T09:27:49.000Z</published>
    <updated>2024-09-09T10:01:19.511Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19kDtY8aTXut2neYrIw+p7l0pTjLQmtdORBWX2hL1MW5jAtOpDHHH+32AbwGDG5Ui9maRj35bmoihutzA6QJVXTXxcHebEhwMbmyi+daSSRNxy92P9AG+AfUE8/yQcwPV0AfSDEgVLuKOVEDKI9w3FSjxiIcmnE/Q2tO/9km+WLTkp86Dn/HmkcyAm9JZaYE3n+nnSQtHysxQdxIm9669A9Qx0J5uvZ1rASJZGY+/C1t9kbyZStTmo0Lhzudo4bTP8jV0YLUpvkmc6zW5NlZi7EkHVqt+Mx3qdHvFlDZwLf6QrIgerJpJ1n/V01p8HBiEM/GtWjBzdke5Ik1zYnL91lMrfQr7PDNy/NQkJEn7TluWmnkfKuza7yW/qbe/XwRUEf6xSunBUTp5xTpk3XiouB1IU4soYxGbyB8wJFUWG8McCpAQ4DX7bDAa6q34F1GDKi9AszA3GTT2zfIdLOrAECgqQyxQcWW+rMkVG0LTorzDvil29u9vTNFMUgUmzxZBbsd5SNZTc3U2eqXaaAbHKhuGOOpXoUGJh68Um8fVRIp+FE0Q3vyjo3vUa9lrsPrhgTMrjtPCcuau17MoBVGgaBcfIGi3D8ykWc4h3A7c/ucjfQ7KLLu8AvPmgrUshGlLlWITapePZzfbOhdA21NIrgsrWNrSL16kzkCTUvplAo7ua8t2EXciHDeKs/2EXlk85edE6H3qkJAtzKfmlBrK7kzuYLCt1V6XMwM4HHCc0f3fdbMSHxhYh1izgTWXhL76SNLrd1AskrDRTgDc9/bi6y7PldWmXGyiHtndd/79YfeN6MpGTW7Ih4C0qzmyJyA88SZjGXLw6vQwpd9777FtwjI1KaPbdZHmRvIH0bq3kiJNaafJYSG3ovEhCdCM2vnY14I4Q10wvEi5b+c0tuHHRc7rp4ilDJUEyIIP+m8n0oGHVt0T3lpoFZzw+Wj8xgF0CGo7GZB4olOW087U7egKnUos7I88GfY8jvlqcioGRH5xRvA7WS541mmR9lEe7+2wGdm91+knHLkuyb8RmG2Y2Ijutc5pyROIVljOR30nVKBhPR2KPJGoYMSNCWgl7Ly7qfxD918eui653H2+fzBrN4ddqZw6QorST+ZYCqfDdOKWBNryh2Qx8D/qX3s+IkuSFa+LGSSZ6N8ROzxCU1mMbpI/Cg1cFQED5YT+WfwdvOcEsuf8VPk6XKdFW93a1AAT6C5E4R0iFh0zHmfK/Mx8Fyrx0hsHRQYnzLnZV0Q7nXiwBYQb+iE6o5QV7q4GF3AIiemS0RkXPWVEHYA1K2znxFe/hlsBqUT7YxJe5yzTUTguqUfImEU8w46vl9UPUj5i+kFXEbjFOzp5GvsZiNktIQfmdhcdGMNYOI4Cyn+boRfifvoBU/1otZOD+GgA47qnSL2hsYCMPwxIb7Ew/V+oRTwUBgX7PuLSWv0D7Ko2WU6pWceDyZjCIcrhVSAXpWnjBhRXySoxqTMpjfSwerq0Cbx6XVs5PfsGcRVvsr1jIbtzbtKwrrAf0QAvFVPjAEVGznZqBkxiFsSCiGV6uzx2PbwDlfNKmE3ZNvKReTT5ot8vne4H/P6UzG2DxKLgvZMmiiuN2S1NU6Us25ZNoe+hIFXCifxazLuqE=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    <category term="玻璃组分仿真" scheme="https://yjxdl.github.io/categories/%E7%8E%BB%E7%92%83%E7%BB%84%E5%88%86%E4%BB%BF%E7%9C%9F/"/>
    
    
    <category term="组分仿真" scheme="https://yjxdl.github.io/tags/%E7%BB%84%E5%88%86%E4%BB%BF%E7%9C%9F/"/>
    
    <category term="Matlab" scheme="https://yjxdl.github.io/tags/Matlab/"/>
    
    <category term="线性模拟" scheme="https://yjxdl.github.io/tags/%E7%BA%BF%E6%80%A7%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>软件加密</title>
    <link href="https://yjxdl.github.io/2023/04/13/SelfLearning/%E8%BD%AF%E4%BB%B6%E5%8A%A0%E5%AF%86/"/>
    <id>https://yjxdl.github.io/2023/04/13/SelfLearning/%E8%BD%AF%E4%BB%B6%E5%8A%A0%E5%AF%86/</id>
    <published>2023-04-13T06:40:21.000Z</published>
    <updated>2023-04-13T06:55:12.595Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    <category term="软件加密" scheme="https://yjxdl.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%8A%A0%E5%AF%86/"/>
    
    
    <category term="软件加密" scheme="https://yjxdl.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>LightingChart</title>
    <link href="https://yjxdl.github.io/2023/04/11/LightingChart/"/>
    <id>https://yjxdl.github.io/2023/04/11/LightingChart/</id>
    <published>2023-04-11T13:07:04.000Z</published>
    <updated>2023-04-11T13:08:01.142Z</updated>
    
    
    
    
    <category term="LightningChart" scheme="https://yjxdl.github.io/categories/LightningChart/"/>
    
    
    <category term="WPF" scheme="https://yjxdl.github.io/tags/WPF/"/>
    
    <category term="Chart控件" scheme="https://yjxdl.github.io/tags/Chart%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java学习</title>
    <link href="https://yjxdl.github.io/2023/04/11/%E8%AE%BA%E6%96%87/Java%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yjxdl.github.io/2023/04/11/%E8%AE%BA%E6%96%87/Java%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-04-11T07:53:27.000Z</published>
    <updated>2024-10-28T02:21:23.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="Java乱码问题"><a href="#Java乱码问题" class="headerlink" title="Java乱码问题"></a>Java乱码问题</h3><p>在CMD运行时输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chcp 65001</span><br></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Dfile.encoding=utf-8 -jar 项目名称.jar</span><br></pre></td></tr></table></figure><h3 id="解决Sql-server连接不上出错的问题"><a href="#解决Sql-server连接不上出错的问题" class="headerlink" title="解决Sql server连接不上出错的问题"></a>解决Sql server连接不上出错的问题</h3><p>出错描述：驱动程序无法通过使用安全套接字层(SSL)加密与 SQL Server 建立安全连接。错误:“The server selected protocol version TLS10 is not accepted by client preferences [TLS13, TLS12]”。<br>1、 打开C:\Program Files\Java\jdk-1.8\jre\lib\security<br>2、 修改打开文件后，修改jdk.tls.disabledAlgorithms这一项，去掉TLSv1, 和 3DES_EDE_CBC,字符。然后重新启动项目，调用数据库执行SQL就没问题了<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic@main/PicFile/20241028102109.png"></p><style>h2{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{    background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}</style>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h2&gt;&lt;h3 id=&quot;Java乱码问题&quot;&gt;&lt;a href=&quot;#Java乱码问题&quot; class=&quot;headerlink&quot; title=&quot;J</summary>
      
    
    
    
    <category term="Java" scheme="https://yjxdl.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://yjxdl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>远程SQL Server数据传递给MYSQL</title>
    <link href="https://yjxdl.github.io/2022/10/11/CAPP/MYSQL%E4%BC%A0%E8%BE%93%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE/"/>
    <id>https://yjxdl.github.io/2022/10/11/CAPP/MYSQL%E4%BC%A0%E8%BE%93%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE/</id>
    <published>2022-10-11T06:47:13.000Z</published>
    <updated>2024-09-09T09:01:08.805Z</updated>
    
    <content type="html"><![CDATA[<style>h2{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{    background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}</style><h2 id="方法一：使用SqlSugar自带的bulkcopy将数据传递给mysql"><a href="#方法一：使用SqlSugar自带的bulkcopy将数据传递给mysql" class="headerlink" title="方法一：使用SqlSugar自带的bulkcopy将数据传递给mysql"></a>方法一：使用SqlSugar自带的bulkcopy将数据传递给mysql</h2><h3 id="从sqlserver中将数据保存到List中"><a href="#从sqlserver中将数据保存到List中" class="headerlink" title="从sqlserver中将数据保存到List中"></a>从sqlserver中将数据保存到List中</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">SqlSugarClient dbBPM = <span class="keyword">new</span> SqlSugar.SqlSugarClient(<span class="keyword">new</span> ConnectionConfig()</span><br><span class="line">&#123;</span><br><span class="line">    ConnectionString = ConfigurationManager.ConnectionStrings[<span class="string">&quot;BPM&quot;</span>].ConnectionString,<span class="comment">//远程BPM连接字符串                                                                            </span></span><br><span class="line">    DbType = SqlSugar.DbType.SqlServer, <span class="comment">//数据库类型</span></span><br><span class="line">    IsAutoCloseConnection = <span class="literal">true</span>,<span class="comment">//不设成true,要手动close</span></span><br><span class="line">    InitKeyType = InitKeyType.Attribute<span class="comment">//从特性读取主键自增的信息</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> res = dbBPM.Queryable&lt;View_PK_Review_Comments_KY&gt;().ToList();</span><br><span class="line"><span class="comment">//需要传输的数据</span></span><br><span class="line">List&lt;schedulingtasks&gt; testmysqlbulkcopy = <span class="keyword">new</span> List&lt;schedulingtasks&gt;();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> res)</span><br><span class="line">&#123;</span><br><span class="line">    schedulingtasks temp = <span class="keyword">new</span> schedulingtasks();</span><br><span class="line">    temp.cInvCode = item.cInvCode;</span><br><span class="line">    temp.Datatime = item.ApplyDate;</span><br><span class="line">    temp.SerialNumber = item.cInvCode;</span><br><span class="line">    temp.iQuantity = item.iQuantity.ToString(); ;</span><br><span class="line">    temp.cbdefine14 = item.cbdefine14;</span><br><span class="line">    testmysqlbulkcopy.Add(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将数据写入Mysql"><a href="#将数据写入Mysql" class="headerlink" title="将数据写入Mysql"></a>将数据写入Mysql</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">SqlSugarClient dbMysql = <span class="keyword">new</span> SqlSugarClient(<span class="keyword">new</span> ConnectionConfig()</span><br><span class="line">&#123;</span><br><span class="line">    ConnectionString = ConfigurationManager.ConnectionStrings[<span class="string">&quot;MYSQL&quot;</span>].ConnectionString,<span class="comment">//Master Connection</span></span><br><span class="line">    DbType = SqlSugar.DbType.MySql,</span><br><span class="line">   InitKeyType = InitKeyType.Attribute,</span><br><span class="line">    IsAutoCloseConnection = <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//InitKeyType = InitKeyType.SystemTable</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//生成实体类对象</span></span><br><span class="line"><span class="comment">//dbMysql.DbFirst.Where(&quot;schedulingtasks&quot;).CreateClassFile(&quot;c:\\Demo\\1&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写入数据前需要先将数据清空</span></span><br><span class="line">dbMysql.DbMaintenance.TruncateTable&lt;schedulingtasks&gt;();</span><br><span class="line"><span class="keyword">var</span> count = dbMysql.Fastest&lt;schedulingtasks&gt;().AS(<span class="string">&quot;schedulingtasks&quot;</span>).BulkCopy(testmysqlbulkcopy);</span><br></pre></td></tr></table></figure><h2 id="方法二：暂时不想写-以前写的代码如下"><a href="#方法二：暂时不想写-以前写的代码如下" class="headerlink" title="方法二：暂时不想写,以前写的代码如下"></a>方法二：暂时不想写,以前写的代码如下</h2><p>思路：将sqlserver 数据表的内容放到txt文件夹，然后把txt文件使用 Load data infile 批量导入到MYSQL</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using (SqlConnection sourceconn = new SqlConnection(Local_Database))</span><br><span class="line">&#123;</span><br><span class="line">    //把数据存储到txt文件里面</span><br><span class="line">    StreamWriter streamWriter = new StreamWriter(@&quot;C:\ProgramData\MySQL\MySQL Server 8.0\Uploads\aa.txt&quot;);</span><br><span class="line">    sourceconn.Open();</span><br><span class="line">    SqlCommand cmd = new SqlCommand(&quot;select * from AA_FormButtonMenus_base1;&quot;, sourceconn);</span><br><span class="line">    using (SqlDataReader rdr = cmd.ExecuteReader())</span><br><span class="line">    &#123;</span><br><span class="line">        string into_txt;</span><br><span class="line">        while (rdr.Read())</span><br><span class="line">        &#123;</span><br><span class="line">            into_txt = rdr[0].ToString() + &quot;,&quot; + rdr[1].ToString() + &quot;,&quot; + rdr[2].ToString() + &quot;,&quot; + rdr[3].ToString() + &quot;,&quot; + rdr[4].ToString() + &quot;,&quot; + rdr[5].ToString() + &quot;,&quot; + rdr[6].ToString() + &quot;,&quot; + rdr[7].ToString() + &quot;,&quot; + rdr[8].ToString() + &quot;,&quot; + rdr[9].ToString() + &quot;,&quot; + rdr[10].ToString() + &quot;,&quot; + rdr[11].ToString() + &quot;,&quot; + rdr[12].ToString() + &quot;,&quot; + rdr[13].ToString() + &quot;,&quot; + rdr[14].ToString() + &quot;,&quot; + rdr[15].ToString() + &quot;\n&quot;;</span><br><span class="line">            streamWriter.Write(into_txt);</span><br><span class="line">        &#125;</span><br><span class="line">        streamWriter.Close();</span><br><span class="line">        using (MySqlConnection destinationconn = new MySqlConnection(Remote_Database))</span><br><span class="line">        &#123;</span><br><span class="line">            //打开mysql数据库连接</span><br><span class="line">            destinationconn.Open();</span><br><span class="line">            MySqlCommand mycmd = new MySqlCommand();</span><br><span class="line">            mycmd.Connection = destinationconn;</span><br><span class="line"></span><br><span class="line">            //往MySQL里面Load数据</span><br><span class="line">            //   string load_str1 = &quot;LOAD DATA LOCAL INFILE &#x27;C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/aa.txt&#x27; INTO TABLE AA_FormButtonMenus_base CHARACTER SET utf8  FIELDS TERMINATED BY &#x27;,&#x27; LINES TERMINATED BY &#x27;\n&#x27;;&quot;;</span><br><span class="line">            string load_str2 = @&quot;set GLOBAL local_infile =1;TRUNCATE `destination`.`aa_formbuttonmenus_base`;set sql_mode = &#x27;&#x27;;LOAD DATA LOCAL INFILE &#x27;C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/aa.txt&#x27; INTO TABLE AA_FormButtonMenus_base CHARACTER SET utf8  FIELDS TERMINATED BY &#x27;,&#x27; LINES TERMINATED BY &#x27;\n&#x27;;&quot;;</span><br><span class="line">            mycmd.CommandText = load_str2;</span><br><span class="line"></span><br><span class="line">            int i = mycmd.ExecuteNonQuery();</span><br><span class="line">            if (i &gt; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(&quot;已成功把本地SQLServer数据迁移到远程MYSQL&quot;, &quot;信息提示&quot;, MessageBoxButtons.OK, MessageBoxIcon.Information);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="出现错误：Loading-local-data-is-disabled-this-must-be-enabled-on-both-the-client-and-server-sides"><a href="#出现错误：Loading-local-data-is-disabled-this-must-be-enabled-on-both-the-client-and-server-sides" class="headerlink" title="出现错误：Loading local data is disabled; this must be enabled on both the client and server sides"></a>出现错误：Loading local data is disabled; this must be enabled on both the client and server sides</h2><h3 id="检查全局变量"><a href="#检查全局变量" class="headerlink" title="检查全局变量"></a>检查全局变量</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show global variables like &#x27;local_infile&#x27;;</span><br></pre></td></tr></table></figure><p>如果显示 OFF，则说明不可用<br>如果显示 ON，则说明可用<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202210111715403.png"></p><h2 id="将值变为ON"><a href="#将值变为ON" class="headerlink" title="将值变为ON"></a>将值变为ON</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global local_infile=1;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202210111718533.png"></p><h2 id="Mysql连接字符串一定要加入-AllowLoadLocalInfile-true-否则会出错，我找了很久才发现这个错误，真的头大"><a href="#Mysql连接字符串一定要加入-AllowLoadLocalInfile-true-否则会出错，我找了很久才发现这个错误，真的头大" class="headerlink" title="Mysql连接字符串一定要加入 AllowLoadLocalInfile = true; 否则会出错，我找了很久才发现这个错误，真的头大"></a>Mysql连接字符串一定要加入 AllowLoadLocalInfile = true; 否则会出错，我找了很久才发现这个错误，真的头大</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如：server = localhost;user id =root;password = 75951;database = interactfunction;SslMode = none;AllowLoadLocalInfile=tru</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
h2{
    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);
color: #000;
}
h3{
    background: linear-gradient(to top, </summary>
      
    
    
    
    <category term="Mysql" scheme="https://yjxdl.github.io/categories/Mysql/"/>
    
    
    <category term="Mysql" scheme="https://yjxdl.github.io/tags/Mysql/"/>
    
    <category term="SQLServer" scheme="https://yjxdl.github.io/tags/SQLServer/"/>
    
  </entry>
  
  <entry>
    <title>Mysql远程连接设置</title>
    <link href="https://yjxdl.github.io/2022/10/10/CAPP/MYSQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%AE%BE%E7%BD%AE/"/>
    <id>https://yjxdl.github.io/2022/10/10/CAPP/MYSQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-10-10T11:25:57.000Z</published>
    <updated>2024-09-09T09:01:08.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="点击进入-MYSQL-0-Command-Line-Client"><a href="#点击进入-MYSQL-0-Command-Line-Client" class="headerlink" title="点击进入 MYSQL.0 Command Line Client"></a>点击进入 MYSQL.0 Command Line Client</h2><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202210101858437.png"></p><h2 id="输入mysql密码"><a href="#输入mysql密码" class="headerlink" title="输入mysql密码"></a>输入mysql密码</h2><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202210101859326.png"></p><h2 id="选择user数据库"><a href="#选择user数据库" class="headerlink" title="选择user数据库"></a>选择user数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202210101903029.png"></p><h2 id="修改远程用户连接"><a href="#修改远程用户连接" class="headerlink" title="修改远程用户连接"></a>修改远程用户连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;Password&#x27;;</span><br></pre></td></tr></table></figure><p>注意：password这里填你的mysql密码。<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202210101908826.png"></p><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><h3 id="修改表后并不会生效，需要执行以下sql使用修改生效。"><a href="#修改表后并不会生效，需要执行以下sql使用修改生效。" class="headerlink" title="修改表后并不会生效，需要执行以下sql使用修改生效。"></a>修改表后并不会生效，需要执行以下sql使用修改生效。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h2 id="修改入站规则"><a href="#修改入站规则" class="headerlink" title="修改入站规则"></a>修改入站规则</h2><h3 id="在防火墙和网络保护中的高级设置中修改入站规则"><a href="#在防火墙和网络保护中的高级设置中修改入站规则" class="headerlink" title="在防火墙和网络保护中的高级设置中修改入站规则"></a>在防火墙和网络保护中的高级设置中修改入站规则</h3><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202210101914937.png"></p><h3 id="选择端口"><a href="#选择端口" class="headerlink" title="选择端口"></a>选择端口</h3><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202210101914056.png"></p><h3 id="选择本地端口，输入3306"><a href="#选择本地端口，输入3306" class="headerlink" title="选择本地端口，输入3306"></a>选择本地端口，输入3306</h3><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202210101915513.png"></p><h3 id="一路下一步，最后输入名称"><a href="#一路下一步，最后输入名称" class="headerlink" title="一路下一步，最后输入名称"></a>一路下一步，最后输入名称</h3><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202210101916770.png"></p><h3 id="此时可以在入站规则中看到新增的-testmysql"><a href="#此时可以在入站规则中看到新增的-testmysql" class="headerlink" title="此时可以在入站规则中看到新增的 testmysql"></a>此时可以在入站规则中看到新增的 testmysql</h3><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202210101917179.png"></p>]]></content>
    
    
    <summary type="html">Mysql远程连接配置说明</summary>
    
    
    
    <category term="Mysql" scheme="https://yjxdl.github.io/categories/Mysql/"/>
    
    
    <category term="Mysql" scheme="https://yjxdl.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>PLC学习</title>
    <link href="https://yjxdl.github.io/2022/10/03/CAPP/PLC%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yjxdl.github.io/2022/10/03/CAPP/PLC%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-10-03T02:19:25.000Z</published>
    <updated>2022-10-06T03:15:23.322Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    <category term="上位机串口的简单使用" scheme="https://yjxdl.github.io/categories/%E4%B8%8A%E4%BD%8D%E6%9C%BA%E4%B8%B2%E5%8F%A3%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="PLC" scheme="https://yjxdl.github.io/tags/PLC/"/>
    
  </entry>
  
  <entry>
    <title>C#通过S7.Net读取西门子PLC数据</title>
    <link href="https://yjxdl.github.io/2022/09/30/CAPP/Csharp%E8%BF%9E%E6%8E%A5PLC/"/>
    <id>https://yjxdl.github.io/2022/09/30/CAPP/Csharp%E8%BF%9E%E6%8E%A5PLC/</id>
    <published>2022-09-30T01:53:49.000Z</published>
    <updated>2024-09-09T09:01:08.814Z</updated>
    
    <content type="html"><![CDATA[<style>h3{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h4{    background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}</style><h3 id="对PLC变量以及DB块，以及FB块、FC块与DB块"><a href="#对PLC变量以及DB块，以及FB块、FC块与DB块" class="headerlink" title="对PLC变量以及DB块，以及FB块、FC块与DB块"></a>对PLC变量以及DB块，以及FB块、FC块与DB块</h3><p><a href="https://li-pingan.github.io/2021/08/31/%E8%A5%BF%E9%97%A8%E5%AD%90PLC%E5%AD%A6%E4%B9%A0/">对PLC变量以及DB块，以及FB块、FC块与DB块</a></p><h3 id="把C-中安装S7NetPlus"><a href="#把C-中安装S7NetPlus" class="headerlink" title="把C#中安装S7NetPlus"></a>把C#中安装S7NetPlus</h3><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202209301032998.png"></p><figure class="highlight c#"><figcaption><span>通过类型，IP地址，和槽口号，机架号设置连接</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btn_ConnectPLC_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Plc newPlc = <span class="keyword">new</span> Plc(CpuType.S71200, <span class="string">&quot;192.168.0.1&quot;</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    newPlc.Open();</span><br><span class="line">    <span class="keyword">if</span>(newPlc.IsConnected)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;PLC连接成功&quot;</span>, <span class="string">&quot;建立连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;PLC连接失败&quot;</span>, <span class="string">&quot;建立连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对TIA-Portal的设置"><a href="#对TIA-Portal的设置" class="headerlink" title="对TIA Portal的设置"></a>对TIA Portal的设置</h3><h4 id="一、-修改PLC的属性，勾选运行来自远程的PUT-GET通信访问"><a href="#一、-修改PLC的属性，勾选运行来自远程的PUT-GET通信访问" class="headerlink" title="一、 修改PLC的属性，勾选运行来自远程的PUT/GET通信访问"></a>一、 修改PLC的属性，勾选运行来自远程的PUT/GET通信访问</h4><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202209301036363.png"></p><h4 id="二、-如果使用的仿真环境，需要在项目中设置块编译时支持仿真"><a href="#二、-如果使用的仿真环境，需要在项目中设置块编译时支持仿真" class="headerlink" title="二、 如果使用的仿真环境，需要在项目中设置块编译时支持仿真"></a>二、 如果使用的仿真环境，需要在项目中设置块编译时支持仿真</h4><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202209301040593.png"></p><h4 id="三、-创建test数据块"><a href="#三、-创建test数据块" class="headerlink" title="三、 创建test数据块"></a>三、 创建test数据块</h4><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202209301042142.png"></p><h5 id="1、-在test数据块的属性中取消优化块的访问"><a href="#1、-在test数据块的属性中取消优化块的访问" class="headerlink" title="1、 在test数据块的属性中取消优化块的访问"></a>1、 在test数据块的属性中取消优化块的访问</h5><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202209301120972.png"></p><h5 id="对OPC-UA-的介绍"><a href="#对OPC-UA-的介绍" class="headerlink" title="对OPC UA 的介绍"></a>对OPC UA 的介绍</h5><p><a href="https://www.cnblogs.com/thammer/p/12882468.html">OPC UA</a></p><h5 id="2、-首先对位进行读写的操作"><a href="#2、-首先对位进行读写的操作" class="headerlink" title="2、 首先对位进行读写的操作"></a>2、 首先对位进行读写的操作</h5><p>创建一个bool量<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202209301150522.png"><br>对位进行读取</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取位操作数</span></span><br><span class="line"><span class="built_in">bool</span> B = (<span class="built_in">bool</span>)newPlc.Read(<span class="string">&quot;DB1.DBX0.0&quot;</span>);</span><br><span class="line">newPlc.Write(<span class="string">&quot;DB1.DBX0.0&quot;</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>对数据块进行读取操作<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202209301615944.png"></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取数据块的操作</span></span><br><span class="line"><span class="built_in">byte</span>[] Bs = newPlc.ReadBytes(DataType.DataBlock, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">string</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i =<span class="number">0</span>; i &lt; Bs.Length; i ++)</span><br><span class="line">&#123;</span><br><span class="line">    s += Bs[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数据块的内容写入</span></span><br><span class="line"><span class="built_in">byte</span>[] B2 = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; B2.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    B2[i] = (<span class="built_in">byte</span>)i;</span><br><span class="line">&#125;</span><br><span class="line">newPlc.Write(DataType.DataBlock, <span class="number">1</span>, <span class="number">2</span>, B2);</span><br></pre></td></tr></table></figure><p>写入数据块后可以看到，数据改变<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202209301622540.png"><br>对I、Q、M类型的值进行操作，创建的类型如下<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202209301631200.png"></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对字节字双字的操作记得进行强制转换</span></span><br><span class="line">newPlc.Write(<span class="string">&quot;MB100&quot;</span>, (Byte)<span class="number">70</span>); <span class="comment">//B 字节，8位，不可以为负</span></span><br><span class="line">newPlc.Write(<span class="string">&quot;MW104&quot;</span>,(Int16)<span class="number">80</span>); <span class="comment">//W 字，16位</span></span><br><span class="line">newPlc.Write(<span class="string">&quot;MD108&quot;</span>, (Int32)<span class="number">90</span>);<span class="comment">//D 双字,32位</span></span><br><span class="line"><span class="comment">//读取操作</span></span><br><span class="line"><span class="built_in">int</span> x = Convert.ToInt32(newPlc.Read(<span class="string">&quot;MB100&quot;</span>));</span><br><span class="line"><span class="built_in">int</span> y = Convert.ToInt32(newPlc.Read(<span class="string">&quot;MW104&quot;</span>));</span><br><span class="line"><span class="built_in">int</span> z = Convert.ToInt32(newPlc.Read(<span class="string">&quot;MD108&quot;</span>));</span><br></pre></td></tr></table></figure><p>修改结束后值如下<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202209301636310.png"></p><p>修改结束后的结果如下<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202209301645093.png"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="读取PLC的其他信息可以得到"><a href="#读取PLC的其他信息可以得到" class="headerlink" title="读取PLC的其他信息可以得到"></a>读取PLC的其他信息可以得到</h4><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202209301656450.png"></p><h4 id="数据块的导入以及导出操作"><a href="#数据块的导入以及导出操作" class="headerlink" title="数据块的导入以及导出操作"></a>数据块的导入以及导出操作</h4><p>右键数据块，选择从块生成源<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202209301701746.png"><br>此时如果我们删除本地的test数据库，然后将导出的test.db导入到博图中<br>选择外部源文件-&gt;添加新的外部文件-&gt;导入生成的test.db文件<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202209301705555.png"><br>右键test.db-&gt;选择从源生成块就可以</p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
h3{
    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);
color: #000;
}
h4{
    background: linear-gradient(to top, </summary>
      
    
    
    
    <category term="C#连接PLC" scheme="https://yjxdl.github.io/categories/C-%E8%BF%9E%E6%8E%A5PLC/"/>
    
    
    <category term="C#" scheme="https://yjxdl.github.io/tags/C/"/>
    
    <category term="PLC" scheme="https://yjxdl.github.io/tags/PLC/"/>
    
  </entry>
  
  <entry>
    <title>C#使用Redis</title>
    <link href="https://yjxdl.github.io/2022/06/22/SelfLearning/CSharp%E4%BD%BF%E7%94%A8Redis/"/>
    <id>https://yjxdl.github.io/2022/06/22/SelfLearning/CSharp%E4%BD%BF%E7%94%A8Redis/</id>
    <published>2022-06-22T12:42:45.000Z</published>
    <updated>2024-09-09T09:31:10.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis管理工具"><a href="#Redis管理工具" class="headerlink" title="Redis管理工具"></a>Redis管理工具</h2><ul><li><strong>百度网盘下载Redis管理工具</strong><br>链接：<a href="https://pan.baidu.com/s/1rTtHzT-pP0MoDejBGgVNzw">https://pan.baidu.com/s/1rTtHzT-pP0MoDejBGgVNzw</a><br>提取码：1234</li><li><strong>编辑连接设置</strong><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206222038471.png"></li></ul><p><strong>连接成功会显示</strong><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206222038975.png"></p><ul><li><strong>注意这里要打开Redis命令窗口</strong><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206222121473.png"></li><li><strong>C#使用Redis示例</strong></li></ul><ol><li>在NuGet中安装ServiceStack.Redis<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206222100196.png"></li><li>C#代码示例<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> ServiceStack.Redis;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CsharpRedisTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> RedisClient client = <span class="keyword">new</span> RedisClient(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            client.ChangeDb(<span class="number">1</span>);</span><br><span class="line">            List&lt;<span class="built_in">int</span>&gt; ls = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">            ls.Add(<span class="number">131</span>);</span><br><span class="line">            ls.Add(<span class="number">2567</span>);</span><br><span class="line">            ls.Add(<span class="number">5465</span>);</span><br><span class="line">            <span class="comment">//读取</span></span><br><span class="line">            <span class="built_in">string</span> name = client.Get&lt;String&gt;(<span class="string">&quot;name1&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> pwd = client.Get&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;password1&quot;</span>);</span><br><span class="line">            <span class="comment">//存储</span></span><br><span class="line">            client.Set&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;11&quot;</span>);</span><br><span class="line">            client.Set&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;22&quot;</span>);</span><br><span class="line">            <span class="comment">//存list集合</span></span><br><span class="line">            client.Set&lt;List&lt;<span class="built_in">int</span>&gt;&gt;(<span class="string">&quot;1&quot;</span>, ls);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style>h2{ background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{ background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}</style></li></ol>]]></content>
    
    
    <summary type="html">C#使用Redis</summary>
    
    
    
    <category term="C#使用Redis" scheme="https://yjxdl.github.io/categories/C-%E4%BD%BF%E7%94%A8Redis/"/>
    
    
    <category term="C#" scheme="https://yjxdl.github.io/tags/C/"/>
    
    <category term="Redis" scheme="https://yjxdl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>模式学习</title>
    <link href="https://yjxdl.github.io/2022/06/16/SelfLearning/Refactoring/"/>
    <id>https://yjxdl.github.io/2022/06/16/SelfLearning/Refactoring/</id>
    <published>2022-06-16T05:34:45.000Z</published>
    <updated>2022-07-18T07:57:35.632Z</updated>
    
    <content type="html"><![CDATA[<style>h2{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{    background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}</style><h2 id="什么是重构？为什么要重构？"><a href="#什么是重构？为什么要重构？" class="headerlink" title="什么是重构？为什么要重构？"></a>什么是重构？为什么要重构？</h2><p>重构主要是改善现有程序的代码，使其使用更方便、简单的使用，提高可用性、可维护性。<br>重构的概念一般是指对类进行重构，一般在现有类的现有某些功能方法不能满足扩展需要，或者修复bug时，就需要重构。</p><h2 id="C-设计模式学习"><a href="#C-设计模式学习" class="headerlink" title="C# 设计模式学习"></a>C# 设计模式学习</h2><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>单一职责原则：就一个类而言，应该只有一个引起它变化的原因。如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会影响到其他的职责，另外，把多个职责耦合在一起，也会影响复用性。</li><li>开闭原则(Open-Closed Principle)：开闭原则即OCP（Open-Closed Principle缩写）原则，该原则强调的是：一个软件实体（指的类、函数、模块等）应该对扩展开放，对修改关闭。即每次发生变化时，要通过添加新的代码来增强现有类型的行为，而不是修改原有的代码。<br>符合开闭原则的最好方式是提供一个固有的接口，然后让所有可能发生变化的类实现该接口，让固定的接口与相关对象进行交互。</li><li>里氏代替原则(Liskov Substitution Principle)：　Liskov Substitution Principle,LSP（里氏代替原则）指的是子类必须替换掉它们的父类型。也就是说，在软件开发过程中，子类替换父类后，程序的行为是一样的。只有当子类替换掉父类后，此时软件的功能不受影响时，父类才能真正地被复用，而子类也可以在父类的基础上添加新的行为。为了就来看看违反了LSP原则的例子，具体代码如下所示：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Rectangle</span><br><span class="line">    &#123;</span><br><span class="line">        public virtual long Width &#123; get; set; &#125;</span><br><span class="line">        public virtual long Height &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 正方形</span><br><span class="line">    public class Square : Rectangle</span><br><span class="line">    &#123;</span><br><span class="line">        public override long Height</span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                return base.Height;</span><br><span class="line">            &#125;</span><br><span class="line">            set</span><br><span class="line">            &#123;</span><br><span class="line">                base.Height = value;</span><br><span class="line">                base.Width = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override long Width</span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                return base.Width;</span><br><span class="line">            &#125;</span><br><span class="line">            set</span><br><span class="line">            &#123;</span><br><span class="line">                base.Width = value;</span><br><span class="line">                base.Height = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> class Test</span><br><span class="line">    &#123;</span><br><span class="line">        public void Resize(Rectangle r)</span><br><span class="line">        &#123;</span><br><span class="line">            while (r.Height &gt;= r.Width)</span><br><span class="line">            &#123;</span><br><span class="line">                r.Width += 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        var r = new Square() &#123; Width = 10, Height = 10 &#125;;</span><br><span class="line">         new Test().Resize(r);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>上面的设计，正如上面注释的一样，在执行SmartTest的resize方法时，如果传入的是长方形对象，当高度大于宽度时，会自动增加宽度直到超出高度。但是如果传入的是正方形对象，则会陷入死循环。此时根本原因是，矩形不能作为正方形的父类，既然出现了问题，可以进行重构，使它们俩都继承于四边形类。重构后的代码如下所示：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 四边形</span><br><span class="line">    public abstract class Quadrangle</span><br><span class="line">    &#123;</span><br><span class="line">        public virtual long Width &#123; get; set; &#125;</span><br><span class="line">        public virtual long Height &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 矩形</span><br><span class="line">    public class Rectangle : Quadrangle</span><br><span class="line">    &#123;</span><br><span class="line">        public override long Height &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">        public override long Width &#123; get; set; &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    // 正方形</span><br><span class="line">    public class Square : Quadrangle</span><br><span class="line">    &#123;</span><br><span class="line">        public long _side;</span><br><span class="line"></span><br><span class="line">        public Square(long side)</span><br><span class="line">        &#123;</span><br><span class="line">            _side = side;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> class Test</span><br><span class="line">    &#123;</span><br><span class="line">        public void Resize(Quadrangle r)</span><br><span class="line">        &#123;</span><br><span class="line">            while (r.Height &gt;= r.Width)</span><br><span class="line">            &#123;</span><br><span class="line">                r.Width += 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var s = new Square(10);</span><br><span class="line"></span><br><span class="line">            new Test().Resize(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>依赖倒置原则:依赖倒置（Dependence Inversion Principle, DIP）原则指的是抽象不应该依赖于细节，细节应该依赖于抽象，也就是提出的 “面向接口编程，而不是面向实现编程”。这样可以降低客户与具体实现的耦合。</li><li>接口隔离原则:接口隔离原则（Interface Segregation Principle, ISP）指的是使用多个专门的接口比使用单一的总接口要好。也就是说不要让一个单一的接口承担过多的职责，而应把每个职责分离到多个专门的接口中，进行接口分离。过于臃肿的接口是对接口的一种污染。</li><li>合成复用原则:合成复用原则（Composite Reuse Principle, CRP）就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分。新对象通过向这些对象的委派达到复用已用功能的目的。简单地说，就是要尽量使用合成/聚合，尽量不要使用继承。要使用好合成复用原则，首先需要区分”Has—A”和“Is—A”的关系。“Is—A”是指一个类是另一个类的“一种”，是属于的关系，而“Has—A”则不同，它表示某一个角色具有某一项责任。导致错误的使用继承而不是聚合的常见的原因是错误地把“Has—A”当成“Is—A”.例如：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231058775.png"><br>实际上，雇员、经理、学生描述的是一种角色，比如一个人是“经理”必然是“雇员”。在上面的设计中，一个人无法同时拥有多个角色，是“雇员”就不能再是“学生”了，这显然不合理，因为现在很多在职研究生，即使雇员也是学生。<br>上面的设计的错误源于把“角色”的等级结构与“人”的等级结构混淆起来了，误把“Has—A”当作”Is—A”。具体的解决方法就是抽象出一个角色类：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231101491.png"></li><li>迪米特法则：迪米特法则（Law of Demeter，LoD）又叫最少知识原则（Least Knowledge Principle，LKP），指的是一个对象应当对其他对象有尽可能少的了解。也就是说，一个模块或对象应尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立，这样当一个模块修改时，影响的模块就会越少，扩展起来更加容易。　关于迪米特法则其他的一些表述有：只与你直接的朋友们通信；不要跟“陌生人”说话。外观模式（Facade Pattern)和中介者模式（Mediator Pattern）就使用了迪米特法则。<h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3>创建型模式就是用来创建对象的模式，抽象了实例化的过程。所有的创建型模式都有两个共同点。第一，它们都将系统使用哪些具体类的信息封装起来；第二，它们隐藏了这些类的实例是如何被创建和组织的。创建型模式包括单例模式、工厂方法模式、抽象工厂模式、建造者模式和原型模式。</li></ol><ul><li>单例模式：解决的是实例化对象的个数的问题，比如抽象工厂中的工厂、对象池等，除了Singleton之外，其他创建型模式解决的都是 new 所带来的耦合关系。</li><li>抽象工厂：创建一系列相互依赖对象，并能在运行时改变系列。</li><li>工厂方法：创建单个对象，在Abstract Factory有使用到。</li><li>原型模式：通过拷贝原型来创建新的对象。<br>工厂方法，抽象工厂, 建造者都需要一个额外的工厂类来负责实例化“一个对象”，而Prototype则是通过原型（一个特殊的工厂类）来克隆“易变对象”。<h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4>单例模式指的是确保某一个类只有一个实例，并提供一个全局访问点。解决的是实体对象个数的问题，而其他的建造者模式都是解决new所带来的耦合关系问题。其实现要点有：</li><li>类只有一个实例。问：如何保证呢？答：通过私有构造函数来保证类外部不能对类进行实例化</li><li>提供一个全局的访问点。问：如何实现呢？答：创建一个返回该类对象的静态方法<br>单例模式的结构图如下所示：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231111900.png"><br>单例的实现方式有很多种，但从最简单的实现（非延迟加载，非线程安全，效率低下），到可延迟加载，线程安全，且高效的实现，它们都有一些基本的共同点：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. 单例类都只有一个private的无参构造函数</span><br><span class="line">. 类声明为sealed（不是必须的）</span><br><span class="line">. 类中有一个静态变量保存着所创建的实例的引用</span><br><span class="line">. 单例类会提供一个静态方法或属性来返回创建的实例的引用（eg.GetInstance）</span><br></pre></td></tr></table></figure>单例模式（Singleton Pattern）是一种常用的模式，有一些对象我们往往只需要一个，比如全局缓存、浏览器中的 window 对象等。单例模式用于保证一个类仅有一个实例，并提供一个访问它的全局访问点。<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> 单例模式线程安全</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton _instance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _lock = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">lock</span> (_lock)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        _instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                        _instance.Value = <span class="keyword">value</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Value &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestSingleton</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Singleton singleton = Singleton.GetInstance(<span class="keyword">value</span>);</span><br><span class="line">            Console.WriteLine(singleton.Value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// The client code.</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(</span><br><span class="line">                <span class="string">&quot;&#123;0&#125;\n&#123;1&#125;\n\n&#123;2&#125;\n&quot;</span>,</span><br><span class="line">                <span class="string">&quot;If you see the same value, then singleton was reused (yay!)&quot;</span>,</span><br><span class="line">                <span class="string">&quot;If you see different values, then 2 singletons were created (booo!!)&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RESULT:&quot;</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            Thread process1 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                TestSingleton(<span class="string">&quot;FOO&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            Thread process2 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                TestSingleton(<span class="string">&quot;BAR&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            process1.Start();</span><br><span class="line">            process2.Start();</span><br><span class="line"></span><br><span class="line">            process1.Join();</span><br><span class="line">            process2.Join();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h4>建造者模式（Builder Pattern）将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。<br>一辆小汽车 🚗 通常由 发动机、底盘、车身和电气设备 四大部分组成。汽车电气设备的内部构造很复杂，简单起见，我们只考虑三个部分：引擎、底盘和车身。<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231459423.png"><br>在现实生活中，小汽车也是由不同的零部件组装而成，比如上图中我们把小汽车分成引擎、底盘和车身三大部分。下面我们来看一下如何使用建造者模式来造车子。<h2 id="B站学习"><a href="#B站学习" class="headerlink" title="B站学习"></a>B站学习</h2><h3 id="单一职责原则实例及总结"><a href="#单一职责原则实例及总结" class="headerlink" title="单一职责原则实例及总结"></a>单一职责原则实例及总结</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231526571.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231527965.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231528006.png"><h3 id="开放封装远哲分析与介绍"><a href="#开放封装远哲分析与介绍" class="headerlink" title="开放封装远哲分析与介绍"></a>开放封装远哲分析与介绍</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231547707.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231549783.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231551790.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231555786.png"><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231650826.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231651247.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231706104.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231708726.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231709829.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231709954.png"><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231745761.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231751695.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231751915.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231752800.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231754280.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231755193.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231756085.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231758482.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206231800715.png"><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206250922711.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206250923816.png"><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206260048024.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261355681.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261356202.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261357222.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261359941.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261359601.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261400705.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261405592.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261413450.png"><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261428690.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261429666.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261432012.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261432653.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261433597.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261434887.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261434915.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261437810.png"><h3 id="面向对象设计六大原则总结"><a href="#面向对象设计六大原则总结" class="headerlink" title="面向对象设计六大原则总结"></a>面向对象设计六大原则总结</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261524208.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261528252.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261529633.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261533571.png"><h3 id="Factory-Design-Pattern"><a href="#Factory-Design-Pattern" class="headerlink" title="Factory Design Pattern"></a>Factory Design Pattern</h3><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261540559.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206261541342.png"></li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202207181555773.png"><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202207181556520.png"></p>]]></content>
    
    
    <summary type="html">学习笔记</summary>
    
    
    
    <category term="关于模式的学习" scheme="https://yjxdl.github.io/categories/%E5%85%B3%E4%BA%8E%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C#" scheme="https://yjxdl.github.io/tags/C/"/>
    
    <category term="模式" scheme="https://yjxdl.github.io/tags/%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C#面向对象的学习笔记</title>
    <link href="https://yjxdl.github.io/2022/06/08/CAPP/CSharp%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yjxdl.github.io/2022/06/08/CAPP/CSharp%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-06-08T06:59:40.000Z</published>
    <updated>2022-09-30T02:28:04.507Z</updated>
    
    <content type="html"><![CDATA[<style>h2{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{    background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}</style><h2 id="C-继承机制"><a href="#C-继承机制" class="headerlink" title="C#继承机制"></a>C#继承机制</h2><p>一个基类具备基本的特征，派生类除了具备基本特征外还具备特殊的特征。<br>C#继承机制：</p><ol><li>继承是面向对象技术最有特色、最重要、也是与传统编程方法最不同的。</li><li>继承表示了实体间的一种层次关系。<ul><li>基类（父类），派生类（子类）；</li><li>派生类可以继承基类的特征和能力，如属性和方法；</li><li>派生类还可以添加新的特性或者是修改已有的特性以满足特定的要求，但不能删除基类的成员；</li><li>一个父类可以有多个子类，父类是所有子类公共特征的集合，子类则是父类的特殊化。</li><li>C#中每个子类只能有一个基类，即不允许多重继承。</li></ul></li><li>继承的好处：实现了代码的重用。</li><li>派生类可以继承基类中除构造函数和析构函数外的所有可访问的成员。</li><li>访问修饰符protected的作用：子类可以访问，其他的类都不可以访问。</li><li>继承是可传递的</li><li>基类与派生类之间的转换：可以分为隐式转换和显式转换。<ul><li>隐式转换：派生类-&gt;基类</li><li>显式转换：基类-&gt;派生类（有条件），反过来基类向派生对象转换过程就没有这么顺利。<figure class="highlight c#"><figcaption><span>派生类向基类转换</span></figcaption><table><tr><td class="code"><pre><span class="line">People p = <span class="keyword">new</span> People();</span><br><span class="line">Animal a = p;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><figcaption><span>基类向派生类转换,无法编译通过</span></figcaption><table><tr><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">People p = a;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><figcaption><span>基类向派生类转换,做强制类型转换，会抛出异常：InvalidCastException</span></figcaption><table><tr><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">People p = (People)a;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><figcaption><span>基类向派生类转换,做强制类型转换，进一步改造</span></figcaption><table><tr><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> People();</span><br><span class="line">People p = (People)a;</span><br></pre></td></tr></table></figure><h3 id="继承的好处，在程序中的体现"><a href="#继承的好处，在程序中的体现" class="headerlink" title="继承的好处，在程序中的体现"></a>继承的好处，在程序中的体现</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基类</span></span><br><span class="line">Class Animal</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="built_in">int</span> brseval;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    Animal_fun1()</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//定义</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//派生类</span></span><br><span class="line">Class Dog:Animal</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="built_in">int</span> derivedvars;</span><br><span class="line">    <span class="comment">//成员函数</span></span><br><span class="line">    Dog_fun1()</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//定义</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">    d.Animal_fun1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>派生类Dog继承基类Animal后，基类的一部分成员就可以被派生类使用，比如基类中的Animal_fun1这个方法，在派生类中无须再定义。d对象是派生类Dog的对象，它就可以直接使用d.Animal_fun1这个方法。<br>继承的好处是无须重新编写代码，维护方便。<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Class Animal</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//成员变量</span></span><br><span class="line">   <span class="built_in">int</span> eyes,mouth;</span><br><span class="line">   Animal()</span><br><span class="line">   &#123;</span><br><span class="line">      eyes = <span class="number">2</span>;</span><br><span class="line">      mouth = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   PetAnimal()</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="comment">//定义</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">Class Cat:Animal</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//成员变量</span></span><br><span class="line">   <span class="comment">//成员函数</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Barking</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">   <span class="comment">//定义</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>继承的过程中，不允许实现多重继承，但允许多重接口实现。多重继承指的是一个类即继承了A，有继承了B，因为类A和类B在成员上可能存在着矛盾，所以不允许实现多继承。而接口我们在后面会讲到，它不需要实现它的成员，只要在继承的类里面去实现具体成员，所以允许多重接口实现。<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Duck</span>:<span class="title">Animal</span>,<span class="title">Bird</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//允许多重接口实现</span></span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="comment">//成员函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例学习：类的继承"><a href="#案例学习：类的继承" class="headerlink" title="案例学习：类的继承"></a>案例学习：类的继承</h3>本案例要求编写一个程序，程序中定义”动物”这个类，然后再定义一个”狗”类，狗类要继承动物这个类。在狗对象实例化的同时，调用base构造函数为狗对象赋予类型、数量等信息。在此基础上加一个“宠物类”,要求一个区别，不同于其他一般的看家狗的方法。代码如下：<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">            dog.GetInfo();</span><br><span class="line">            dog.DispInfo();<span class="comment">//描述信息</span></span><br><span class="line">            dog.GetData();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> style;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> number;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetInfo</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请输入动物的类型和数量：&quot;</span>);</span><br><span class="line">                style = Console.ReadLine();</span><br><span class="line">                number = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DispInfo</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;该动物的类型为&#123;0&#125;,数量为&#123;1&#125;&quot;</span>, style, number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> weight;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> color;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> hobby;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetData</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请输入狗的年龄：&quot;</span>);</span><br><span class="line">                age = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请分别输入狗的体重，颜色和爱好：&quot;</span>);</span><br><span class="line">                weight = Console.ReadLine();</span><br><span class="line">                color = Console.ReadLine();</span><br><span class="line">                hobby = Console.ReadLine();</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;该狗的特征为：&#123;0&#125;，&#123;1&#125;，&#123;2&#125;&quot;</span>, weight, color, hobby);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果显示为：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206082129155.png"><br>程序中，dog是派生类Dog的对象，它调用的方法GetInfo和DispInfo都是从基类Animal中继承过来的。因为在Animal类中已经实现了这两个方法，所以，无须在类Dog中实现这两个方法。而GetData方法在类Animal中没有，是Dog类中自己从成员，所以需要在Dog类中实现。<br>在此基础上加一个“宠物类”,要求一个区别，不同于其他一般的看家狗的方法。代码如下：<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Dog dog = new Dog();</span></span><br><span class="line">            <span class="comment">//dog.GetInfo();</span></span><br><span class="line">            <span class="comment">//dog.DispInfo();//描述信息</span></span><br><span class="line">            <span class="comment">//dog.GetData();</span></span><br><span class="line">            PetDog dog = <span class="keyword">new</span> PetDog();</span><br><span class="line">            dog.GetInfo();</span><br><span class="line">            dog.DispInfo();</span><br><span class="line">            dog.GetData();</span><br><span class="line">            dog.GetDiff();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> style;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> number;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetInfo</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请输入动物的类型和数量：&quot;</span>);</span><br><span class="line">                style = Console.ReadLine();</span><br><span class="line">                number = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DispInfo</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;该动物的类型为&#123;0&#125;,数量为&#123;1&#125;&quot;</span>, style, number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> weight;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> color;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> hobby;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetData</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请输入狗的年龄：&quot;</span>);</span><br><span class="line">                age = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请分别输入狗的体重，颜色和爱好：&quot;</span>);</span><br><span class="line">                weight = Console.ReadLine();</span><br><span class="line">                color = Console.ReadLine();</span><br><span class="line">                hobby = Console.ReadLine();</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;该狗的特征为：&#123;0&#125;，&#123;1&#125;，&#123;2&#125;&quot;</span>, weight, color, hobby);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PetDog</span> : <span class="title">Dog</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetDiff</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;宠物狗比一般的看家狗更干净，更时尚&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206082142094.png"><h3 id="案例学习：Base的应用"><a href="#案例学习：Base的应用" class="headerlink" title="案例学习：Base的应用"></a>案例学习：Base的应用</h3>在继承的过程中，经常会遇到一个关键字base。它的作用：</li></ul><ol><li>用于从派生类中访问基类成员。</li><li>可以使用base关键字调用基类的构造函数<br>下面的代码定义了一个”动物”这个类，然后再定义一个”狗”类，狗类要继承动物这个类。在狗对象实例化的同时，调用base构造函数为狗对象赋予类型、数量等信息。<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Dog dog = <span class="keyword">new</span> Dog(<span class="string">&quot;狂暴型&quot;</span>, <span class="number">50</span>, <span class="string">&quot;咬沙发&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> _style;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> _number;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Animal</span>(<span class="params"><span class="built_in">string</span> style,<span class="built_in">int</span> number</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._style = style;</span><br><span class="line">                <span class="keyword">this</span>._number = number;</span><br><span class="line">                Console.WriteLine(_style);</span><br><span class="line">                Console.WriteLine(_number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dog</span>:<span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> character;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">string</span> style, <span class="built_in">int</span> number, <span class="built_in">string</span> character</span>) : <span class="title">base</span>(<span class="params">style, number</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.character = character;</span><br><span class="line">                Console.WriteLine(character);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206090944438.png"><br>这个程序在对Dog对象实例化时，将style和number的值传递给通过base调用的Animal构造函数，这样完成了对类型、数量等信息的赋值操作。<h2 id="C-多态机制"><a href="#C-多态机制" class="headerlink" title="C#多态机制"></a>C#多态机制</h2>课堂上，老师给出很多个函数，它们的作用都是比较大小。这些函数的名称都相同，不同的是参数类型，个数和函数的返回值。过后，老师又给出一大堆数据，它们又整型、单精度、双精度等。而同学们要根据这些数据找出相应的函数，最终根据那个函数判断大小。这就是多态的原理。</li></ol></li></ol><ul><li>C#多态机制<ul><li>多态：多态的意思是事物就有不同形式的能力。例如，对不同的实例，某个操作可能会有不同的行为。这个行为依赖于所要操作数据的类型。</li><li>多态：用同样一个语句，执行不同的操作。</li><li>多态机制使用具有不同内部结构的对象可以共享相同的外部接口。</li></ul></li><li>如何实现多态？<ul><li>C#中有两种实现多态的方法<ul><li>通过继承实现多态</li><li>通过重载实现多态</li></ul></li><li>通过继承，可以用两种方法实现多态<ul><li>重写基类的虚方法（虚方法重写）</li><li>重写基类的抽象方法</li></ul></li></ul></li><li>对基类虚方法的重写涉及的问题<ul><li>基类和派生类中定义完全相同的两个方法<ul><li>方法名相同</li><li>对应的参数相同</li><li>返回值相同</li></ul></li><li>语法规定<ul><li>基类的方法必须用virtual修饰符定义为虚方法</li><li>派生类必须用override修饰符重新定义该方法</li></ul></li><li>与非虚方法的比较</li><li>虚方法调用的特点：由对象变量所引用的对象来决定执行哪一个方法，而与对象变量本身的类型无关。</li><li>方法重写是实现多态的一种方法。<h3 id="方法重写案例：基类虚方法重写的应用"><a href="#方法重写案例：基类虚方法重写的应用" class="headerlink" title="方法重写案例：基类虚方法重写的应用"></a>方法重写案例：基类虚方法重写的应用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            circle pan = <span class="keyword">new</span> circle();</span><br><span class="line">            pan.L();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;圆的面积为&#123;0&#125;&quot;</span>, pan.S());</span><br><span class="line">            earth e = <span class="keyword">new</span> earth();</span><br><span class="line">            e.L();            </span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">circle</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line">            <span class="built_in">double</span> r = <span class="number">0.0</span>;</span><br><span class="line">            <span class="function"><span class="keyword">virtual</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">L</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请输入圆的半径：&quot;</span>);</span><br><span class="line">                r = <span class="built_in">double</span>.Parse(Console.ReadLine());</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;圆的周长为&#123;0&#125;&quot;</span>, <span class="number">2</span> * pi * r);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">S</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(<span class="string">&quot;请输入圆的半径：&quot;</span>);</span><br><span class="line">                r = <span class="built_in">double</span>.Parse(Console.ReadLine());</span><br><span class="line">                <span class="keyword">return</span> pi * r * r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">earth</span>:<span class="title">circle</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> brand;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">L</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;地球仪的品牌是：&quot;</span>);</span><br><span class="line">                brand = Console.ReadLine();</span><br><span class="line">                <span class="keyword">base</span>.L();</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0&#125;牌的地球仪还不错&quot;</span>, brand);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>程序中首先定义一个基类circle表示<br>输出结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206091041193.png"><h3 id="案例学习：基类非虚方法的重写的应用-方法的隐藏"><a href="#案例学习：基类非虚方法的重写的应用-方法的隐藏" class="headerlink" title="案例学习：基类非虚方法的重写的应用(方法的隐藏)"></a>案例学习：基类非虚方法的重写的应用(方法的隐藏)</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            People p = <span class="keyword">new</span> People();</span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            People pc = s;</span><br><span class="line">            p.HideFun();</span><br><span class="line">            s.HideFun();</span><br><span class="line">            pc.HideFun();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">People</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HideFun</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;人类的HideFun方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span>:<span class="title">People</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HideFun</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;学生类的HideFun方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在该程序中，基类和派生类都定义了方法HideFun,如果用基类对象调用该方法则输出父类People的HideFun方法，如果是派生类对象调用该方法则输出子类Student的HideFun方法。也就是说，在继承的过程中，派生类的方法将同名的基类方法隐藏了。<br>结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206091053360.png"><br>实际上pc引用的是Student，因此本质是Student。能否执行Student的HideFun？如果不能，那么我又怎样执行Student的HideFun？<br>基类和派生类的方法关系表</li></ul></li></ul><table><thead><tr><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">扩充</td><td align="left">是派生类新增的，基类没有</td></tr><tr><td align="left">重载</td><td align="left">派生类中又与基类同名的方法，但参数类型或个数不同</td></tr><tr><td align="left">完全相同</td><td align="left">派生类中定义了一个与基类相同的方法，即方法的原型完全相同</td></tr><tr><td align="left">隐藏</td><td align="left">可以声明与继承而来的同名成员</td></tr><tr><td align="left">重写</td><td align="left">基类的方法，属性，索引器重新定义，而成员名和相应的参数都不变</td></tr><tr><td align="left">调用</td><td align="left">用base调用基类的方法</td></tr></tbody></table><h3 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h3><p>抽象类和抽象方法，访问修饰符用abstract。<br>语法：</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ClassOne</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//类实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>含有抽象类的方法是抽象类，抽象类可以没有抽象方法。抽象类是派生类的基类，不能实例化。抽象方法在抽象类里面不能实现。在派生类中，抽象方法等抽象成员必须被重写并实现。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Animal</span> <span class="comment">//抽象类</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">int</span> legs;<span class="comment">//成员变量</span></span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">base</span>(<span class="params">parameters</span>)</span>;<span class="comment">//抽象函数   </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Dog</span>:<span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">int</span> eyes;<span class="comment">//成员变量</span></span><br><span class="line">   <span class="function"><span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Base</span>(<span class="params">parameters</span>) <span class="comment">//成员函数，必须重写</span></span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">//实际实现</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态还分为运行时多态性和编译时多态性。</p><ol><li>运行时多态性是通过继承和虚函数来实现的。运行时的多态性是指系统在编译时不确定选用哪个重载方法，而是直到程序运行时，才根据实际情况决定采用哪个重载方法。</li><li>编译时的多态性具有运行速度快的特点，而运行时的多态性则具有极大的灵活性。<h3 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h3>这个方法允许用户定义的类型如结构和类，为使它们的对象易于操作而使用重载操作符。<br>如何实现操作符的重载？</li><li>运算符的重载实质上就是函数重载。</li><li>运算符的函数表示法</li></ol><table><thead><tr><th>运算符</th><th>函数表示法</th></tr></thead><tbody><tr><td>op x</td><td>operator op(x)</td></tr><tr><td>x op</td><td>operator op(x)</td></tr><tr><td>x op y</td><td>operator op(x,y)</td></tr></tbody></table><ol start="3"><li>语法规定<ul><li>允许重载运算符</li><li>必须是public和static</li><li>至少有一个参数是类自身</li><li>可以被重载的操作符如下表所示</li></ul></li></ol><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>+,-,!,~,++,–</td><td>这些一元操作符需要一个操作数，可以被重载</td></tr><tr><td>+,-,*,/,%</td><td>这些二元操作符需要两个操作数，可以被重载</td></tr><tr><td>==,!=,&lt;,&gt;,&lt;=,&gt;=</td><td>比较操作符可以被重载</td></tr><tr><td>&amp;&amp;,//</td><td>条件逻辑操作符不能被直接重载，但是它使用&amp;和/它们可以求值，被重载</td></tr><tr><td>+=,-=,*=,/=,%=</td><td>赋值操作符不能被重载</td></tr><tr><td>=,.,?:,-&gt;,new,is,sizeof,typeof</td><td>这些操作符不能被重载</td></tr></tbody></table><h3 id="案例学习：运算符的应用"><a href="#案例学习：运算符的应用" class="headerlink" title="案例学习：运算符的应用"></a>案例学习：运算符的应用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_2</span>运算符重载的应用</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 在这个程序中，+号被重载，被重载的+号可以用来计算TwoD类型对象的相加，还可以计算TwoD类型对象与整数类型的相加操作。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">class</span> <span class="title">TwoD</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> x;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> X</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> y;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Y</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> y;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">TwoD</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                x = y = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">TwoD</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                x = a;</span><br><span class="line">                y = b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> TwoD <span class="keyword">operator</span> +(TwoD op1, TwoD op2)</span><br><span class="line">            &#123;</span><br><span class="line">                TwoD result = <span class="keyword">new</span> TwoD();</span><br><span class="line">                result.x = op1.x + op2.x;</span><br><span class="line">                result.y = op1.y + op2.y;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> TwoD <span class="keyword">operator</span> +(TwoD op1, <span class="built_in">int</span> op2)</span><br><span class="line">            &#123;</span><br><span class="line">                TwoD result = <span class="keyword">new</span> TwoD();</span><br><span class="line">                result.x = op1.x + op2;</span><br><span class="line">                result.y += op1.x + op2;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;x坐标：&#123;0&#125;,y坐标：&#123;1&#125;&quot;</span>,X, Y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TwoD t1 = <span class="keyword">new</span> TwoD(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            TwoD t2 = <span class="keyword">new</span> TwoD(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">            t1 = t1 + t2;</span><br><span class="line">            Console.WriteLine(t1);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面这个程序里，+号被重载，被重载的+号可以用来计算TwoD类型对象的相加，还可以计算TwoD类型对象与整数类型的相加操作。</p><h3 id="案例：函数重载另外一个实例"><a href="#案例：函数重载另外一个实例" class="headerlink" title="案例：函数重载另外一个实例"></a>案例：函数重载另外一个实例</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_2</span>运算符重载的应用2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">TwoD</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> x;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> X</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> y;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Y</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> y;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">TwoD</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                x = y = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">TwoD</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                x = a;</span><br><span class="line">                y = b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> TwoD <span class="keyword">operator</span> +(TwoD op1, TwoD op2)</span><br><span class="line">            &#123;</span><br><span class="line">                TwoD result = <span class="keyword">new</span> TwoD();</span><br><span class="line">                result.x = op1.x + op2.x;</span><br><span class="line">                result.y = op1.y + op2.y;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> TwoD <span class="keyword">operator</span> +(TwoD op1, <span class="built_in">int</span> op2)</span><br><span class="line">            &#123;</span><br><span class="line">                TwoD result = <span class="keyword">new</span> TwoD();</span><br><span class="line">                result.x = op1.x + op2;</span><br><span class="line">                result.y += op1.x + op2;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;x坐标：&#123;0&#125;,y坐标：&#123;1&#125;&quot;</span>, X, Y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">ThreeD</span> : <span class="title">TwoD</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> z;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">ThreeD</span>() : <span class="title">base</span>()</span> &#123; z = <span class="number">0</span>; &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">ThreeD</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b, <span class="built_in">int</span> c</span>) : <span class="title">base</span>(<span class="params">a, b</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                z = c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Z</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> z;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> ThreeD <span class="keyword">operator</span> +(ThreeD op1, ThreeD op2)</span><br><span class="line">            &#123;</span><br><span class="line">                ThreeD result = <span class="keyword">new</span> ThreeD(op1.X + op2.X, op1.Y + op2.Y, op1.z + op2.z);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> ThreeD <span class="keyword">operator</span> ++(ThreeD op1)</span><br><span class="line">            &#123;</span><br><span class="line">                ThreeD result = <span class="keyword">new</span> ThreeD(op1.X + <span class="number">1</span>, op1.Y + <span class="number">1</span>, op1.z + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> ==(ThreeD op1, ThreeD op2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((op1.X == op2.X) &amp;&amp; (op1.Y == op2.Y) &amp;&amp; (op1.z == op2.z))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> !=(ThreeD op1, ThreeD op2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((op1.X != op2.X) || (op1.Y != op2.Y) || (op1.z != op2.z))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;,z坐标：&#123;1&#125;&quot;</span>, <span class="keyword">base</span>.ToString(), z);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            ThreeD threeD1 = <span class="keyword">new</span> ThreeD(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            ThreeD threeD2 = <span class="keyword">new</span> ThreeD(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">            ThreeD threeD3 = threeD1 + threeD2;</span><br><span class="line">            <span class="keyword">if</span> (threeD1 == threeD2)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;这两个数值一样！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;这两个数值不同&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(threeD3);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个程序中，+、++、==、!=符号被重载。</p><ol><li>操作符重载为C#操作符应用到用户定义的数据类型提供了额外的能力。</li><li> 仅预定义的C#操作符可以被重载。<br>运算结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206091821428.png"><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2>对于接口的理解，首先我们看一个生活小例子。对于生活中的开关，它需要ON和OFF两种方法。<br>其他开关也涉及ON、OFF两个方法，但是它们的实现与前面提到的开关不一样。所以我们在定义开关这种数据结构的时候，不能直接实现，必须根据开关来决定怎样实现ON，OFF方法。<br>在这种情况下，我们可以把开关定义为接口，比如命名为ISwitch。在接口里定义两个方法ON和OFF，这两个方法只定义不实现。<h3 id="案例学习：接口的应用"><a href="#案例学习：接口的应用" class="headerlink" title="案例学习：接口的应用"></a>案例学习：接口的应用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_3</span>接口的用法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Button bt = <span class="keyword">new</span> Button();</span><br><span class="line">            bt.On();</span><br><span class="line">            bt.Off();</span><br><span class="line">            onOffSwitch oos = <span class="keyword">new</span> onOffSwitch();</span><br><span class="line">            oos.On();</span><br><span class="line">            oos.Off();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISwitch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">On</span>()</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Off</span>()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">onOffSwitch</span>:<span class="title">ISwitch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">On</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;顺时针转动！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Off</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;逆时针转动！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Button</span>:<span class="title">ISwitch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">On</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;开启！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Off</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;关闭！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果显示如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206091939763.png"></li><li>实现接口基本步骤：<ul><li>定义接口: 接口定义了规则</li><li>实现接口: 类实现了接口的规则</li></ul></li><li>接口是引用类型：<ul><li>关键字interface</li><li>接口的成员有：属性、方法、事件和索引器。</li><li>接口中定义的成员只有声明，没有实现</li><li>接口中的成员都隐式地具有public访问属性接口的定义。<h3 id="案例学习：定义接口的应用"><a href="#案例学习：定义接口的应用" class="headerlink" title="案例学习：定义接口的应用"></a>案例学习：定义接口的应用</h3>下面的案例演示了定义接口的用法：<br>value 关键字用于定义set取值函数分配的值。<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_3</span>用类实现接口的应用</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MyPoint p = <span class="keyword">new</span> MyPoint(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;X = &#123;0&#125;,Y=&#123;1&#125;,Z=&#123;2&#125;&quot;</span>, p.X, p.Y, p.Z);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IPoint</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> X</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> Y</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> Z</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyPoint</span> : <span class="title">IPoint</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> myX;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> myY;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> myZ;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyPoint</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> z</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            myX = x;</span><br><span class="line">            myY = y;</span><br><span class="line">            myZ = z;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//实现IPoint接口中的属性</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> X</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> myX;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                myX = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Y</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> myY;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                myY = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Z</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> myZ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                myZ = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>案例输出的结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206100930383.png"><br>这个程序定义了一个表示点的接口IPoint.它有三个成员变量是X,Y和Z,这三个成员是属性，但在接口里只完成定义，不能实现。它们的实现的继承接口的类Mypoint中完成的。<br>用类实现接口：</li></ul></li><li>语法：与继承一样</li><li>规定：必须实现接口中声明的所有成员。<h3 id="案例学习：用类实现接口的应用"><a href="#案例学习：用类实现接口的应用" class="headerlink" title="案例学习：用类实现接口的应用"></a>案例学习：用类实现接口的应用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_3</span>用类实现接口的应用2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">            d.AnimalFun();</span><br><span class="line">            Student student = <span class="keyword">new</span> Student();</span><br><span class="line">            student.AnimalFun();</span><br><span class="line">            student.PeopleFun();</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IAnimal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">AnimalFun</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">People</span>:<span class="title">IAnimal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">PeopleFun</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Dog</span>:<span class="title">IAnimal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AnimalFun</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Dog类实现Animal接口的AnimalFun()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span> :<span class="title">People</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AnimalFun</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Student类实现Animal接口的AnimalFun()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PeopleFun</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Student类实现People接口的PeopleFun()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206100950832.png"><br>接口与继承：</li><li>接口的继承<ul><li>接口可以继承</li><li>接口可以从多个基接口继承，类不允许多重继承</li></ul></li><li>类的继承、实现接口的类<ul><li>相同的语法：类的继承，类实现接口</li><li>类不能多重继承</li><li>类可以实现多个接口，C#可以通过接口来实现多重继承</li><li>规则：类的基列表中可以同时包含基类和接口，但基类应列在首位。<h3 id="案例学习：接口与继承的应用"><a href="#案例学习：接口与继承的应用" class="headerlink" title="案例学习：接口与继承的应用"></a>案例学习：接口与继承的应用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_3</span>接口与继承的应用1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//实现接口的Animal的类Dog</span></span><br><span class="line">            Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">            <span class="comment">//运行错误，抛出InvalidCastException异常</span></span><br><span class="line">            <span class="comment">//People p = (People)a;</span></span><br><span class="line">            <span class="comment">//实现接口People的类Student,People接口从Animal接口继承</span></span><br><span class="line">            Animal a1 = <span class="keyword">new</span> Student();</span><br><span class="line">            a1.AnimalFun();</span><br><span class="line">            People p1 = (People)(a1);</span><br><span class="line">            p1.PeopleFun();</span><br><span class="line">            People p2 = <span class="keyword">new</span> Student();</span><br><span class="line">            p2.PeopleFun();</span><br><span class="line">            Animal a2 = (Animal)p2;</span><br><span class="line">            a2.AnimalFun();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">interface</span> <span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">AnimalFun</span>()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">interface</span> <span class="title">People</span>:<span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">PeopleFun</span>()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">Dog</span>:<span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AnimalFun</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Dog类实现Animal接口的AnimalFun()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span>:<span class="title">People</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AnimalFun</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Student类实现Animal接口的AnimalFun()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PeopleFun</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Student类实现People接口的PeopleFun()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206101023368.png"><br>接口的应用：</li></ul></li><li>用接口实现多重继承。</li><li>用接口实现多态。<h3 id="案例学习：用接口实现多重继承"><a href="#案例学习：用接口实现多重继承" class="headerlink" title="案例学习：用接口实现多重继承"></a>案例学习：用接口实现多重继承</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_3</span>用接口实现多重继承1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Duck duck = <span class="keyword">new</span> Duck();</span><br><span class="line">            duck.CanbeEaten();</span><br><span class="line">            duck.CanFly();</span><br><span class="line">            duck.CanSwimming();</span><br><span class="line">            duck.LittleAnimal();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">LittleAnimal</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">Bird1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">CanFly</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Bird2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">CanFly</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">Swim</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">CanSwimming</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">Food</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">CanbeEaten</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Duck</span> : <span class="title">Bird2</span>, <span class="title">Animal</span>, <span class="title">Swim</span>, <span class="title">Food</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LittleAnimal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸭子是一个小动物.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CanSwimming</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸭子会游泳.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CanbeEaten</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸭子可以做成北京烤鸭吃.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//public void CanFly()</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    Console.WriteLine(&quot;鸭子可以飞&quot;);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">CanFly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸭子会飞哦。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206101044837.png"><h3 id="案例学习：用接口实现多态"><a href="#案例学习：用接口实现多态" class="headerlink" title="案例学习：用接口实现多态"></a>案例学习：用接口实现多态</h3>看一下接口多态是如何实现的？一个生活中的例子：猫、狗、猴子可以跑。编写代码如下：<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_3</span>用接口实现多态</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Run[] runs = <span class="keyword">new</span> Run[<span class="number">3</span>];</span><br><span class="line">            runs[<span class="number">0</span>] = <span class="keyword">new</span> Cat();</span><br><span class="line">            runs[<span class="number">1</span>] = <span class="keyword">new</span> Dog();</span><br><span class="line">            runs[<span class="number">2</span>] = <span class="keyword">new</span> Monkey();</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> r1 <span class="keyword">in</span> runs)</span><br><span class="line">            &#123;</span><br><span class="line">                r1.Run();</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Run</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Run</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Cat</span>:<span class="title">Run</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;小猫可以在屋檐上奔跑！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Run</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;小狗可以在原野上奔跑!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Monkey</span>:<span class="title">Run</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;猴子可以在树林间奔跑!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206101109264.png"><h3 id="案例学习：抽象类的应用"><a href="#案例学习：抽象类的应用" class="headerlink" title="案例学习：抽象类的应用"></a>案例学习：抽象类的应用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_3</span>抽象类的应用</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">            cat.animal();</span><br><span class="line">            Duck duck = <span class="keyword">new</span> Duck();</span><br><span class="line">            duck.animal();</span><br><span class="line">            duck.Fly();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">animal</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Fly</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Fly</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">animal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;猫是一种可爱的小动物!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Duck</span> : <span class="title">Animal</span>, <span class="title">Fly</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">animal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸭子是禽类动物!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;鸭子会飞哦！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果如下：<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206101121876.png"><br>抽象类与接口的比较表：</li></ol><table><thead><tr><th align="left">抽象类</th><th align="left">接口</th></tr></thead><tbody><tr><td align="left">无</td><td align="left">有属性、方法、事件和索引器</td></tr><tr><td align="left">可以有只声明的方法，也可以有完整的方法</td><td align="left">方法都只有声明</td></tr><tr><td align="left">是对实体的抽象</td><td align="left">是对行为的抽象，规定行为的准则</td></tr><tr><td align="left">子类与抽象类，概念上是一致的</td><td align="left">实现接口的类与接口，在概念上是不同的</td></tr></tbody></table><p>多重接口实现:</p><ol><li>C#不允许有多重类继承。</li><li>但C#允许多重接口实现</li><li>这意味着一个类可以实现多个接口。<br>在C#中，只要不发生命名冲突，就完全可以允许多重接口实现。<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPMainp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Apply</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IP</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Apply</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Myima</span>:<span class="title">Base</span>,<span class="title">IP</span>,<span class="title">IPMainp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Apply</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//使用显式接口实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2></li><li>事件的组成<ul><li>事件是一种发布消息的机制</li><li>事件的两个方面，发送方与接收方</li><li>发送方负责发布消息</li><li>接收方进行响应，即接收消息后进行必要的处理</li><li>发送方与接收方通过事件订阅建立关联</li></ul></li><li>C#中的事件<ul><li>C#中事件是类的成员</li><li>C#中事件是通过委托来实现的<br>发送方与接收方通过事件订阅建立关联，事件是类用来通知对象需要执行某种操作的方式。<h3 id="案例学习：事件应用"><a href="#案例学习：事件应用" class="headerlink" title="案例学习：事件应用"></a>案例学习：事件应用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_5</span>事件应用</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyD</span>(<span class="params"><span class="built_in">string</span> mess</span>)</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Publisher publisher = <span class="keyword">new</span> Publisher();</span><br><span class="line">            Receiver receiver1 = <span class="keyword">new</span> Receiver(<span class="string">&quot;李华&quot;</span>);</span><br><span class="line">            Receiver receiver2 = <span class="keyword">new</span> Receiver(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">            publisher.Event += receiver1.Method;</span><br><span class="line">            publisher.Event += receiver2.Method;</span><br><span class="line">            publisher.FireEvent(<span class="string">&quot;面试的时间到了&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//事件的发送者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Publisher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> MyD Event;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FireEvent</span>(<span class="params"><span class="built_in">string</span> notice</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Event != <span class="literal">null</span>) Event(notice);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//事件的接收者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Receiver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> _name;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Receiver</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="built_in">string</span>.Format(<span class="string">&quot;通知&#123;0&#125;,&#123;1&#125;&quot;</span>, _name, s));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果如下图所示:<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206101506764.png"><h3 id="如何实现事件的步骤"><a href="#如何实现事件的步骤" class="headerlink" title="如何实现事件的步骤"></a>如何实现事件的步骤</h3></li></ul></li></ol><table><thead><tr><th align="left">步骤</th><th align="left">说明</th><th align="left">位置</th></tr></thead><tbody><tr><td align="left">定义委托</td><td align="left">[访问修饰符] delegate 返回类型 委托名(参数列表)</td><td align="left"></td></tr><tr><td align="left">定义事件</td><td align="left">[访问修饰符] event 委托名 事件名</td><td align="left">发送方</td></tr><tr><td align="left">触发事件</td><td align="left">利用委托通知已订阅该事件的所有对象</td><td align="left">发送方</td></tr><tr><td align="left">订阅事件</td><td align="left">接收对象要向发送对象订阅事件，接收方与发送发建立关联</td><td align="left"></td></tr><tr><td align="left">定义响应，事件的方法</td><td align="left">对事件进行响应的方法(回调函数),该方法必须符合事件(委托)的要求</td><td align="left">接收方</td></tr></tbody></table><p>好处:事件的发送者不需要事先知道都有那些订阅者。<br>事件通信机制的优点:淡化了事件发送和事件接收两个对象之间的关系，使得两个对象之间不需要建立关联关系就可以进行通信(无连接)。<br>事件发送方:定义事件、触发事件。至于事件触发后做什么，事件发送方并不知道。<br>Windows窗体的事件机制，就是利用事件驱动的方式进行工作的。<br>Button的Click事件:</p><ul><li>发送方:Button事件</li><li>接收方:某个窗体<br>为事件编写处理程序(回调函数)<br>订阅事件:*.designer.cs </li><li>双击控件</li><li>属性窗口中的事件列表<h2 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h2>索引器是访问/修改类中的数据的一种方法:</li><li>像数组一样使用下标访问/修改类中的数据；</li><li>索引器下标可以是int，也可以是string<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line">[访问修饰符] 数据类型 <span class="keyword">this</span>[数据类型 标识符]</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">get</span>&#123;......&#125;</span><br><span class="line">   <span class="keyword">set</span>&#123;......&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="索引器-索引器的应用一"><a href="#索引器-索引器的应用一" class="headerlink" title="索引器:索引器的应用一"></a>索引器:索引器的应用一</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_6</span>索引器的应用一</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Point p = <span class="keyword">new</span> Point();</span><br><span class="line">            p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            p[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">            p[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">            Console.WriteLine(p[<span class="number">0</span>]);</span><br><span class="line">            Console.WriteLine(p[<span class="number">1</span>]);</span><br><span class="line">            Console.WriteLine(p[<span class="number">2</span>]);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> x, y, z;</span><br><span class="line">        <span class="comment">//定义索引器，使得可以使用数组的方式访问Vector的数据</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> <span class="keyword">this</span>[<span class="built_in">int</span> i]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span> (i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> x;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> y;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> z;</span><br><span class="line">                    <span class="comment">//若访问下标超出范围，抛出异常</span></span><br><span class="line">                    <span class="literal">default</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfRangeException(<span class="string">&quot;下标超出范围&quot;</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span>(i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        x = <span class="keyword">value</span>;<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        y = <span class="keyword">value</span>;<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        z = <span class="keyword">value</span>;<span class="keyword">break</span>;</span><br><span class="line">                    <span class="literal">default</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfRangeException(<span class="string">&quot;下标超出范围&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="索引器的应用二"><a href="#索引器的应用二" class="headerlink" title="索引器的应用二"></a>索引器的应用二</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp_6</span>索引器的应用二</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建一个容量为3的相册</span></span><br><span class="line">            Framework friends = <span class="keyword">new</span> Framework(<span class="number">3</span>);</span><br><span class="line">            <span class="comment">//创建3张照片</span></span><br><span class="line">            Picture first = <span class="keyword">new</span> Picture(<span class="string">&quot;幼年照片&quot;</span>);</span><br><span class="line">            Picture second = <span class="keyword">new</span> Picture(<span class="string">&quot;成年照片&quot;</span>);</span><br><span class="line">            Picture third = <span class="keyword">new</span> Picture(<span class="string">&quot;老年照片&quot;</span>);</span><br><span class="line">            <span class="comment">//向相册加载照片</span></span><br><span class="line">            friends[<span class="number">0</span>] = first;</span><br><span class="line">            friends[<span class="number">1</span>] = second;</span><br><span class="line">            friends[<span class="number">2</span>] = third;</span><br><span class="line">            <span class="comment">//按索引检索</span></span><br><span class="line">            Picture p1 = friends[<span class="number">2</span>];</span><br><span class="line">            Console.WriteLine(p1.Title);</span><br><span class="line">            <span class="comment">//按名称索引</span></span><br><span class="line">            Picture p2 = friends[<span class="string">&quot;幼年照片&quot;</span>];</span><br><span class="line">            Console.WriteLine(p2.Title);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Picture</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> _title;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Picture</span>(<span class="params"><span class="built_in">string</span> title</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>._title = title;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span>  Title</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> _title;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Framework</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//该数组用于存放照片</span></span><br><span class="line">        Picture[] pictures;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Framework</span>(<span class="params"><span class="built_in">int</span> capacity</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            pictures = <span class="keyword">new</span> Picture[capacity];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用整型的序号作为下标的索引器</span></span><br><span class="line">        <span class="keyword">public</span> Picture <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//验证索引范围</span></span><br><span class="line">                <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;=pictures.Length)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;索引无效&quot;</span>);</span><br><span class="line">                    <span class="comment">//使用null指示失败</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> pictures[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;=pictures.Length)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;索引无效&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pictures[index] = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Picture <span class="keyword">this</span>[<span class="built_in">string</span> title]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//遍历数组中的所有照片</span></span><br><span class="line">                <span class="keyword">foreach</span>(Picture p <span class="keyword">in</span> pictures)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//将图片中的标题与索引器参数进行比较</span></span><br><span class="line">                    <span class="keyword">if</span> (p.Title == title)</span><br><span class="line">                        <span class="keyword">return</span> p;</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;未找到&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//使用null指示失败</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输出结果如下:<br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/202206101953584.png"><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2></li><li>异常：是指程序允许时发生的错误。</li><li>报告错误(异常):允许时的错误要及时地通知给程序进行必要的处理</li><li>异常对象与抛出异常:CLR将自动收集运行时的错误信息，封装成对象(异常对象)来报告错误。这种报告错误的方法称为抛出异常。</li><li>异常处理:C#用try…catch语句来捕捉系统抛出的异常对象，根据错误的内容进行相应的处理。<br>两种系统的异常</li><li>系统异常<ul><li>对常见的错误定义了相应的异常类;</li><li>发生运行时错误，由CLR将自动收集运行时的错误信息，封装成对象(异常对象)来报告错误。</li></ul></li><li>应用程序异常<ul><li>根据需要定义异常类(从ApplicationException继承);</li><li>程序员根据需要在应用程序的代码中，创建异常对象并抛出System.Exception类;<br>在C#中，异常用类来表示，所有异常类都必须从内部异常类Exception派生而来，而Exception是System名字空间的一部分。因此所有异常都是Exception的子类。</li><li>异常筛选器中指定的异常类型与异常对象的类型相同;</li></ul></li></ul>]]></content>
    
    
    <summary type="html">C#和Matlab混合编程</summary>
    
    
    
    <category term="C#面向对象的学习" scheme="https://yjxdl.github.io/categories/C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C#" scheme="https://yjxdl.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# WinForm窗体自适应各种屏幕的分辨率</title>
    <link href="https://yjxdl.github.io/2022/05/03/CAPP/CSharp%20WinForm%E7%AA%97%E4%BD%93%E9%80%82%E5%BA%94%E5%90%84%E7%A7%8D%E5%B1%8F%E5%B9%95%E5%88%86%E8%BE%A8%E7%8E%87/"/>
    <id>https://yjxdl.github.io/2022/05/03/CAPP/CSharp%20WinForm%E7%AA%97%E4%BD%93%E9%80%82%E5%BA%94%E5%90%84%E7%A7%8D%E5%B1%8F%E5%B9%95%E5%88%86%E8%BE%A8%E7%8E%87/</id>
    <published>2022-05-03T01:23:00.000Z</published>
    <updated>2022-09-30T02:28:04.511Z</updated>
    
    <content type="html"><![CDATA[<style>h2{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}h4{background-image: linear-gradient(to right, #eea2a2 0%, #bbc1bf 19%, #57c6e1 42%, #b49fda 79%, #7ac5d8 100%);}</style><h2 id="C-WinForm窗体自适应各种屏幕的分辨率"><a href="#C-WinForm窗体自适应各种屏幕的分辨率" class="headerlink" title="C# WinForm窗体自适应各种屏幕的分辨率"></a>C# WinForm窗体自适应各种屏幕的分辨率</h2><h3 id="控件大小随着窗体大小等比例的缩放"><a href="#控件大小随着窗体大小等比例的缩放" class="headerlink" title="控件大小随着窗体大小等比例的缩放"></a>控件大小随着窗体大小等比例的缩放</h3><ul><li>得到当前窗体的宽度和高度 <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义两个变量记录当前窗体的宽度和高度</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> x; <span class="comment">//当前窗体的宽度</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> y; <span class="comment">//当前窗体的高度</span></span><br></pre></td></tr></table></figure>x,y值为：<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">x = panel1.Width;</span><br><span class="line">y = panel1.Height;</span><br></pre></td></tr></table></figure></li><li><strong>得到需要扩大的倍数，在Form_Resize下设置</strong><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Resize</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> newx = (<span class="keyword">this</span>.Width) / x; <span class="comment">//宽度需要扩大的倍数</span></span><br><span class="line">    <span class="built_in">float</span> newy = (<span class="keyword">this</span>.Height) / y; <span class="comment">//高度需要扩大的倍数</span></span><br><span class="line">    setControls(newx, newy, <span class="keyword">this</span>);  <span class="comment">//对设置窗体的控件大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>设置窗体控件的大小</strong><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setControls</span>(<span class="params"><span class="built_in">float</span> newx,<span class="built_in">float</span> newy,Control cons</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(Control con <span class="keyword">in</span> cons.Controls)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(con.Tag !=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span>[] mytag = con.Tag.ToString().Split(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">            <span class="comment">//根据窗体缩放的比例确定控件的值</span></span><br><span class="line">            con.Width = Convert.ToInt32(System.Convert.ToSingle(mytag[<span class="number">0</span>]) * newx);<span class="comment">//宽度</span></span><br><span class="line">            con.Height = Convert.ToInt32(System.Convert.ToSingle(mytag[<span class="number">1</span>]) * newy);<span class="comment">//高度</span></span><br><span class="line">            con.Left = Convert.ToInt32(System.Convert.ToSingle(mytag[<span class="number">2</span>]) * newx);<span class="comment">//左边距</span></span><br><span class="line">            con.Top = Convert.ToInt32(System.Convert.ToSingle(mytag[<span class="number">3</span>]) * newy);<span class="comment">//顶边距</span></span><br><span class="line">            Single currentSize = System.Convert.ToSingle(mytag[<span class="number">4</span>]) * newy;<span class="comment">//字体大小</span></span><br><span class="line">            con.Font = <span class="keyword">new</span> Font(con.Font.Name, currentSize, con.Font.Style, con.Font.Unit);</span><br><span class="line">            <span class="keyword">if</span> (con.Controls.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                setControls(newx, newy, con);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历控件得到每个窗体的宽度、高度、左边上边和窗体的大小"><a href="#遍历控件得到每个窗体的宽度、高度、左边上边和窗体的大小" class="headerlink" title="遍历控件得到每个窗体的宽度、高度、左边上边和窗体的大小"></a>遍历控件得到每个窗体的宽度、高度、左边上边和窗体的大小</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTag</span>(<span class="params">Control cons</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(Control con <span class="keyword">in</span> cons.Controls)</span><br><span class="line">    &#123;</span><br><span class="line">        con.Tag = con.Width + <span class="string">&quot;;&quot;</span> + con.Height + <span class="string">&quot;;&quot;</span> + con.Left + <span class="string">&quot;;&quot;</span> + con.Top + <span class="string">&quot;;&quot;</span> + con.Font.Size;</span><br><span class="line">        <span class="keyword">if</span>(con.Controls.Count&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            setTag(con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置改变大小"><a href="#设置改变大小" class="headerlink" title="设置改变大小"></a>设置改变大小</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeSize</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetStyle(ControlStyles.UserPaint, <span class="literal">true</span>);</span><br><span class="line">    SetStyle(ControlStyles.AllPaintingInWmPaint, <span class="literal">true</span>);</span><br><span class="line">    SetStyle(ControlStyles.OptimizedDoubleBuffer, <span class="literal">true</span>);</span><br><span class="line">    x = <span class="keyword">this</span>.Width; </span><br><span class="line">    y = <span class="keyword">this</span>.Height;</span><br><span class="line">    setTag(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//this.WindowState = FormWindowState.Maximized;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3></li></ul><p><strong>这是一个私有仓库，只允许本人访问</strong><br><a href="https://github.com/YJXDL/CSharp-AutoSize">代码地址</a></p>]]></content>
    
    
    <summary type="html">C# WinForm窗体自适应各种屏幕的分辨率</summary>
    
    
    
    <category term="C#" scheme="https://yjxdl.github.io/categories/C/"/>
    
    
    <category term="C#" scheme="https://yjxdl.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#学习笔记</title>
    <link href="https://yjxdl.github.io/2022/04/29/CAPP/CSharpLearning/"/>
    <id>https://yjxdl.github.io/2022/04/29/CAPP/CSharpLearning/</id>
    <published>2022-04-29T04:38:18.000Z</published>
    <updated>2024-09-09T09:01:08.821Z</updated>
    
    <content type="html"><![CDATA[<style>h2{    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);color: #000;}h3{    background: linear-gradient(to top, #e6e9f0 0%, #eef1f5 100%);}</style><h2 id="把C-UserControl控件里面的TextBox控件清空"><a href="#把C-UserControl控件里面的TextBox控件清空" class="headerlink" title="把C# UserControl控件里面的TextBox控件清空"></a>把C# UserControl控件里面的TextBox控件清空</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空TextBox里面的信息</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.Controls.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (Control control <span class="keyword">in</span> <span class="keyword">this</span>.Controls[i].Controls)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (control <span class="keyword">is</span> TextBox)</span><br><span class="line">        &#123;</span><br><span class="line">            TextBox tb = (TextBox)control;</span><br><span class="line">            tb.Text = String.Empty;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改树控件随着下一步的按钮动态地变化"><a href="#修改树控件随着下一步的按钮动态地变化" class="headerlink" title="修改树控件随着下一步的按钮动态地变化"></a>修改树控件随着下一步的按钮动态地变化</h2><p>在树控件下有一个SelectedNode属性，我们把树定义为Static,就可以在其他界面设置TreeView的SelectedNode属性。是不是很吊。</p><p><strong>1. 设置树的Modifiers属性为Public。</strong><br><img src="https://cdn.jsdelivr.net/gh/YJXDL/BlogPic/PicFile/20220503152009.png"><br><strong>2. 利用TreeNode属性记录下所有的树控件的值，设置为 static。</strong></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode tnForm;</span><br></pre></td></tr></table></figure><p><strong>3. 把这些TreeNode写入树的Nodes下。</strong></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">treeViewEx1.Nodes.Add(tnForm);</span><br><span class="line">treeViewEx1.Nodes[<span class="number">0</span>].Expand();<span class="comment">//把菜单展开</span></span><br><span class="line">treeViewEx1.SelectedNode = tnForm.Nodes[<span class="number">0</span>];<span class="comment">//使得默认的为第一个界面</span></span><br></pre></td></tr></table></figure><p><strong>4. 定义树为Static，此时可能会出错，例如：</strong></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">这时把 <span class="keyword">this</span>.treeViewEx1 改为 treeViewEx1 即可</span><br></pre></td></tr></table></figure><p><strong>5. 接下来在下一步按钮的事件中添加</strong></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Form2.treeViewEx1.SelectedNode = Form2.tnForm.Nodes[<span class="number">2</span>];</span><br><span class="line">Form2.AddControl(Form2.MyControl2_1);</span><br></pre></td></tr></table></figure><p><strong>6. 以下为补充信息</strong></p><h2 id="使用SQLSugar生成实体类对象"><a href="#使用SQLSugar生成实体类对象" class="headerlink" title="使用SQLSugar生成实体类对象"></a>使用SQLSugar生成实体类对象</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button4_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    SqlSugarClient db = <span class="keyword">new</span> SqlSugar.SqlSugarClient(<span class="keyword">new</span> ConnectionConfig()</span><br><span class="line">    &#123;</span><br><span class="line">        ConnectionString = LocalDataBaseConn,<span class="comment">//连接字符串</span></span><br><span class="line">                                             <span class="comment">// ConnectionString = @&quot;Server = DESKTOP-QAFSTBC\MYYSSQLSERVER;Database = TopicTwoDataBase;uid = sa;pwd =123&quot;,//连接字符串</span></span><br><span class="line">        DbType = SqlSugar.DbType.SqlServer, <span class="comment">//数据库类型</span></span><br><span class="line">        IsAutoCloseConnection = <span class="literal">true</span>,<span class="comment">//不设成true,要手动close</span></span><br><span class="line">        InitKeyType = InitKeyType.Attribute<span class="comment">//从特性读取主键自增的信息</span></span><br><span class="line">    &#125;);</span><br><span class="line">    db.DbFirst.Where(<span class="string">&quot;producttest&quot;</span>).CreateClassFile(<span class="string">&quot;c:\\Demo\\2&quot;</span>);</span><br><span class="line">    db.DbFirst.Where(<span class="string">&quot;productparamstest&quot;</span>).CreateClassFile(<span class="string">&quot;c:\\Demo\\2&quot;</span>);</span><br><span class="line">    db.DbFirst.Where(<span class="string">&quot;productstaticresulttest&quot;</span>).CreateClassFile(<span class="string">&quot;c:\\Demo\\2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自己封装C-数据库容器，相当于允许Key存在Dictionary"><a href="#自己封装C-数据库容器，相当于允许Key存在Dictionary" class="headerlink" title="自己封装C#数据库容器，相当于允许Key存在Dictionary"></a>自己封装C#数据库容器，相当于允许Key存在Dictionary</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;&gt; list = <span class="keyword">new</span> List&lt;KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">list.Add(<span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(<span class="string">&quot;A&quot;</span>, <span class="number">10</span>));</span><br><span class="line">list.Add(<span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(<span class="string">&quot;B&quot;</span>, <span class="number">11</span>));</span><br><span class="line">list.Add(<span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(<span class="string">&quot;C&quot;</span>, <span class="number">12</span>));</span><br><span class="line">list.Add(<span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(<span class="string">&quot;D&quot;</span>, <span class="number">13</span>));</span><br><span class="line">list.Add(<span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(<span class="string">&quot;E&quot;</span>, <span class="number">14</span>));</span><br><span class="line">list.Add(<span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(<span class="string">&quot;F&quot;</span>, <span class="number">15</span>));</span><br><span class="line">list.Add(<span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(<span class="string">&quot;A&quot;</span>, <span class="number">1000000</span>));</span><br></pre></td></tr></table></figure><h2 id="在C-里面设置全局变量，以便在其他的窗口可以使用"><a href="#在C-里面设置全局变量，以便在其他的窗口可以使用" class="headerlink" title="在C#里面设置全局变量，以便在其他的窗口可以使用"></a>在C#里面设置全局变量，以便在其他的窗口可以使用</h2><ol><li>首先进入program.cs </li><li>在Program类后面添加一个类，注意要是静态类，如下<pre><code><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">user11</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li>进入其他窗口就可以使用：<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">user11.username = <span class="string">&quot;yjx&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="EntityFrameWork-学习"><a href="#EntityFrameWork-学习" class="headerlink" title="EntityFrameWork 学习"></a>EntityFrameWork 学习</h2></li><li>EF中的三种开发方式<br>DBFirst,CodeFirst<h2 id="IList-的Contains无法使用的解决方法"><a href="#IList-的Contains无法使用的解决方法" class="headerlink" title="IList 的Contains无法使用的解决方法"></a>IList<IList> 的Contains无法使用的解决方法</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;<span class="built_in">int</span>&gt;&gt; list = <span class="keyword">new</span> List&lt;List&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line">list.Add(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">if</span>(list.Contains(<span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;))  <span class="comment">// 结果为false</span></span><br></pre></td></tr></table></figure>原因分析：因为List<T>.Contains调用Equals()方法来比较对象<br>由于内部List<T>不会覆盖Equals，因此我们获得的是引用相等性。<br>我们可以通过自定义一个IEqualityComparer&lt;List<T>&gt;来解决问题，该Contains()按值进行比较.<br>也可以只使用LINQ:<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(list.Any(o=&gt;o.SequenceEqual(<span class="keyword">new</span>[]&#123;<span class="number">0</span>,<span class="number">1</span>&#125;));</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
h2{
    background: linear-gradient(to right, #a8edea 0%, #fed6e3 100%);
color: #000;
}
h3{
    background: linear-gradient(to top, </summary>
      
    
    
    
    <category term="C#学习" scheme="https://yjxdl.github.io/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C#" scheme="https://yjxdl.github.io/tags/C/"/>
    
  </entry>
  
</feed>
